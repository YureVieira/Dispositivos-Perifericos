

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Apr 12 09:34:28 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	dabs	1,0x7E,2
    35  0000                     	;# 
    36  0001                     	;# 
    37  0002                     	;# 
    38  0003                     	;# 
    39  0004                     	;# 
    40  0005                     	;# 
    41  0006                     	;# 
    42  000A                     	;# 
    43  000B                     	;# 
    44  000C                     	;# 
    45  000E                     	;# 
    46  000E                     	;# 
    47  000F                     	;# 
    48  0010                     	;# 
    49  0011                     	;# 
    50  0012                     	;# 
    51  0015                     	;# 
    52  0015                     	;# 
    53  0016                     	;# 
    54  0017                     	;# 
    55  0018                     	;# 
    56  0019                     	;# 
    57  001A                     	;# 
    58  001F                     	;# 
    59  0081                     	;# 
    60  0085                     	;# 
    61  0086                     	;# 
    62  008C                     	;# 
    63  008E                     	;# 
    64  0092                     	;# 
    65  0098                     	;# 
    66  0099                     	;# 
    67  009A                     	;# 
    68  009B                     	;# 
    69  009C                     	;# 
    70  009D                     	;# 
    71  009F                     	;# 
    72                           
    73                           	psect	strings
    74  0001                     __pstrings:	
    75  0001                     stringtab:	
    76  0001                     __stringtab:	
    77  0001                     stringcode:	
    78                           ;	String table - string pointers are 1 byte each
    79                           
    80  0001                     stringdir:	
    81  0001  3000               	movlw	high stringdir
    82  0002  008A               	movwf	10
    83  0003  0804               	movf	4,w
    84  0004  0A84               	incf	4,f
    85  0005  0782               	addwf	2,f
    86  0006                     __stringbase:	
    87  0006  3400               	retlw	0
    88  0007                     __end_of__stringtab:	
    89  0007                     _dpowers:	
    90  0007  3401               	retlw	1
    91  0008  3400               	retlw	0
    92  0009  340A               	retlw	10
    93  000A  3400               	retlw	0
    94  000B  3464               	retlw	100
    95  000C  3400               	retlw	0
    96  000D  34E8               	retlw	232
    97  000E  3403               	retlw	3
    98  000F  3410               	retlw	16
    99  0010  3427               	retlw	39
   100  0011                     __end_of_dpowers:	
   101  0011                     STR_4:	
   102  0011  3454               	retlw	84	;'T'
   103  0012  3469               	retlw	105	;'i'
   104  0013  3470               	retlw	112	;'p'
   105  0014  346F               	retlw	111	;'o'
   106  0015  3420               	retlw	32	;' '
   107  0016  3464               	retlw	100	;'d'
   108  0017  3465               	retlw	101	;'e'
   109  0018  3420               	retlw	32	;' '
   110  0019  3454               	retlw	84	;'T'
   111  001A  3461               	retlw	97	;'a'
   112  001B  3467               	retlw	103	;'g'
   113  001C  343A               	retlw	58	;':'
   114  001D  3420               	retlw	32	;' '
   115  001E  3425               	retlw	37	;'%'
   116  001F  3475               	retlw	117	;'u'
   117  0020  3400               	retlw	0
   118  0021                     STR_2:	
   119  0021  344F               	retlw	79	;'O'
   120  0022  346C               	retlw	108	;'l'
   121  0023  3461               	retlw	97	;'a'
   122  0024  3420               	retlw	32	;' '
   123  0025  346D               	retlw	109	;'m'
   124  0026  3475               	retlw	117	;'u'
   125  0027  346E               	retlw	110	;'n'
   126  0028  3464               	retlw	100	;'d'
   127  0029  346F               	retlw	111	;'o'
   128  002A  3421               	retlw	33	;'!'
   129  002B  3400               	retlw	0
   130  002C                     STR_5:	
   131  002C  3443               	retlw	67	;'C'
   132  002D  346F               	retlw	111	;'o'
   133  002E  3464               	retlw	100	;'d'
   134  002F  3469               	retlw	105	;'i'
   135  0030  3467               	retlw	103	;'g'
   136  0031  346F               	retlw	111	;'o'
   137  0032  343A               	retlw	58	;':'
   138  0033  3420               	retlw	32	;' '
   139  0034  3400               	retlw	0
   140  0035                     STR_1:	
   141  0035  3425               	retlw	37	;'%'
   142  0036  3464               	retlw	100	;'d'
   143  0037  3420               	retlw	32	;' '
   144  0038  3420               	retlw	32	;' '
   145  0039  3420               	retlw	32	;' '
   146  003A  3420               	retlw	32	;' '
   147  003B  3400               	retlw	0
   148  003C                     STR_6:	
   149  003C  3425               	retlw	37	;'%'
   150  003D  3464               	retlw	100	;'d'
   151  003E  3400               	retlw	0
   152  003F                     STR_8:	
   153  003F  340A               	retlw	10
   154  0040  3400               	retlw	0
   155  0041                     STR_3:	
   156  0041  342E               	retlw	46	;'.'
   157  0042  3400               	retlw	0
   158  003A                     
   159                           ; #config settings
   160  0000                     
   161                           	psect	nvBANK0
   162  006E                     __pnvBANK0:	
   163  006E                     __mode:	
   164  006E                     	ds	1
   165  0005                     _PORTAbits	set	5
   166  0006                     _PORTB	set	6
   167  0006                     _PORTBbits	set	6
   168  001A                     _RCREG	set	26
   169  0018                     _RCSTAbits	set	24
   170  0019                     _TXREG	set	25
   171  0065                     _RCIF	set	101
   172  0064                     _TXIF	set	100
   173  0099                     _SPBRG	set	153
   174  0085                     _TRISAbits	set	133
   175  0086                     _TRISB	set	134
   176  0086                     _TRISBbits	set	134
   177  0098                     _TXSTAbits	set	152
   178                           
   179                           	psect	cinit
   180  07F7                     start_initialization:	
   181  07F7                     __initialization:	
   182                           
   183                           ; Clear objects allocated to BANK0
   184  07F7  01EC               	clrf	__pbssBANK0& (0+127)
   185  07F8  01ED               	clrf	(__pbssBANK0+1)& (0+127)
   186                           
   187                           ; Clear objects allocated to BANK1
   188  07F9  1383               	bcf	3,7	;select IRP bank0
   189  07FA  30A0               	movlw	low __pbssBANK1
   190  07FB  0084               	movwf	4
   191  07FC  30B0               	movlw	low (__pbssBANK1+16)
   192  07FD  2215               	fcall	clear_ram0
   193  07FE                     end_of_initialization:	
   194                           ;End of C runtime variable initialization code
   195                           
   196  07FE                     __end_of__initialization:	
   197  07FE  0183               	clrf	3
   198  07FF  2E10               	ljmp	_main	;jump to C main() function
   199                           
   200                           	psect	bssBANK0
   201  006C                     __pbssBANK0:	
   202  006C                     _count:	
   203  006C                     	ds	2
   204                           
   205                           	psect	bssBANK1
   206  00A0                     __pbssBANK1:	
   207  00A0                     _buffer:	
   208  00A0                     	ds	16
   209                           
   210                           	psect	clrtext
   211  0215                     clear_ram0:	
   212                           ;	Called with FSR containing the base address, and
   213                           ;	W with the last address+1
   214                           
   215  0215  0064               	clrwdt	;clear the watchdog before getting into this loop
   216  0216                     clrloop0:	
   217  0216  0180               	clrf	0	;clear RAM location pointed to by FSR
   218  0217  0A84               	incf	4,f	;increment pointer
   219  0218  0604               	xorwf	4,w	;XOR with final address
   220  0219  1903               	btfsc	3,2	;have we reached the end yet?
   221  021A  3400               	retlw	0	;all done for this memory range, return
   222  021B  0604               	xorwf	4,w	;XOR again to restore value
   223  021C  2A16               	goto	clrloop0	;do the next byte
   224                           
   225                           	psect	cstackCOMMON
   226  0070                     __pcstackCOMMON:	
   227  0070                     ?_putch:	
   228  0070                     ??_putch:	
   229                           ; 0 bytes @ 0x0
   230                           
   231  0070                     ?_UART_init:	
   232                           ; 0 bytes @ 0x0
   233                           
   234  0070                     ??_UART_init:	
   235                           ; 0 bytes @ 0x0
   236                           
   237  0070                     ?_SPI_init:	
   238                           ; 0 bytes @ 0x0
   239                           
   240  0070                     ??_SPI_init:	
   241                           ; 0 bytes @ 0x0
   242                           
   243  0070                     ??_SPI_transfer:	
   244                           ; 0 bytes @ 0x0
   245                           
   246  0070                     ?_MFRC522_Reset:	
   247                           ; 0 bytes @ 0x0
   248                           
   249  0070                     ?_MFRC522_AntennaOn:	
   250                           ; 0 bytes @ 0x0
   251                           
   252  0070                     ?_MFRC522_Init:	
   253                           ; 0 bytes @ 0x0
   254                           
   255  0070                     ?_main:	
   256                           ; 0 bytes @ 0x0
   257                           
   258  0070                     ?_SPI_transfer:	
   259                           ; 0 bytes @ 0x0
   260                           
   261  0070                     ?_MFRC522_Rd:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     ?_MFRC522_SelectTag:	
   265                           ; 1 bytes @ 0x0
   266                           
   267  0070                     ?_MFRC522_AntiColl:	
   268                           ; 1 bytes @ 0x0
   269                           
   270  0070                     ?_MFRC522_isCard:	
   271                           ; 1 bytes @ 0x0
   272                           
   273  0070                     ?_MFRC522_ReadCardSerial:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ?___lwdiv:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     putch@data:	
   280                           ; 2 bytes @ 0x0
   281                           
   282  0070                     ___lwdiv@divisor:	
   283                           ; 1 bytes @ 0x0
   284                           
   285                           
   286                           ; 2 bytes @ 0x0
   287  0070                     	ds	1
   288  0071                     SPI_init@mode:	
   289  0071                     SPI_transfer@ret_213:	
   290                           ; 1 bytes @ 0x1
   291                           
   292                           
   293                           ; 1 bytes @ 0x1
   294  0071                     	ds	1
   295  0072                     SPI_transfer@ret:	
   296  0072                     ___lwdiv@dividend:	
   297                           ; 1 bytes @ 0x2
   298                           
   299                           
   300                           ; 2 bytes @ 0x2
   301  0072                     	ds	1
   302  0073                     SPI_transfer@i:	
   303                           
   304                           ; 2 bytes @ 0x3
   305  0073                     	ds	1
   306  0074                     ??___lwdiv:	
   307                           
   308                           ; 0 bytes @ 0x4
   309  0074                     	ds	1
   310  0075                     SPI_transfer@i_214:	
   311  0075                     ___lwdiv@quotient:	
   312                           ; 2 bytes @ 0x5
   313                           
   314                           
   315                           ; 2 bytes @ 0x5
   316  0075                     	ds	2
   317  0077                     SPI_transfer@data:	
   318  0077                     ___lwdiv@counter:	
   319                           ; 1 bytes @ 0x7
   320                           
   321                           
   322                           ; 1 bytes @ 0x7
   323  0077                     	ds	1
   324  0078                     ?___lwmod:	
   325  0078                     ___lwmod@divisor:	
   326                           ; 2 bytes @ 0x8
   327                           
   328                           
   329                           ; 2 bytes @ 0x8
   330  0078                     	ds	2
   331  007A                     ___lwmod@dividend:	
   332                           
   333                           ; 2 bytes @ 0xA
   334  007A                     	ds	2
   335  007C                     ??___lwmod:	
   336                           
   337                           ; 0 bytes @ 0xC
   338  007C                     	ds	1
   339  007D                     ___lwmod@counter:	
   340                           
   341                           ; 1 bytes @ 0xD
   342  007D                     	ds	1
   343                           
   344                           	psect	cstackBANK0
   345  0020                     __pcstackBANK0:	
   346  0020                     ?_printf:	
   347                           
   348                           ; 2 bytes @ 0x0
   349  0020                     	ds	2
   350  0022                     ??_printf:	
   351                           
   352                           ; 0 bytes @ 0x2
   353  0022                     	ds	3
   354  0025                     printf@prec:	
   355                           
   356                           ; 1 bytes @ 0x5
   357  0025                     	ds	1
   358  0026                     printf@ap:	
   359                           
   360                           ; 1 bytes @ 0x6
   361  0026                     	ds	1
   362  0027                     printf@flag:	
   363                           
   364                           ; 1 bytes @ 0x7
   365  0027                     	ds	1
   366  0028                     printf@val:	
   367                           
   368                           ; 2 bytes @ 0x8
   369  0028                     	ds	2
   370  002A                     printf@f:	
   371                           
   372                           ; 1 bytes @ 0xA
   373  002A                     	ds	1
   374  002B                     printf@c:	
   375                           
   376                           ; 1 bytes @ 0xB
   377  002B                     	ds	1
   378  002C                     ??_MFRC522_Rd:	
   379                           
   380                           ; 0 bytes @ 0xC
   381  002C                     	ds	2
   382  002E                     MFRC522_Rd@addr:	
   383                           
   384                           ; 1 bytes @ 0xE
   385  002E                     	ds	1
   386  002F                     MFRC522_Rd@value:	
   387                           
   388                           ; 1 bytes @ 0xF
   389  002F                     	ds	1
   390  0030                     ?_MFRC522_Wr:	
   391  0030                     MFRC522_Wr@value:	
   392                           ; 0 bytes @ 0x10
   393                           
   394                           
   395                           ; 1 bytes @ 0x10
   396  0030                     	ds	1
   397  0031                     ??_MFRC522_Wr:	
   398                           
   399                           ; 0 bytes @ 0x11
   400  0031                     	ds	1
   401  0032                     MFRC522_Wr@addr:	
   402                           
   403                           ; 1 bytes @ 0x12
   404  0032                     	ds	1
   405  0033                     ?_MFRC522_Clear_Bit:	
   406  0033                     ?_MFRC522_Set_Bit:	
   407                           ; 0 bytes @ 0x13
   408                           
   409  0033                     ??_MFRC522_Reset:	
   410                           ; 0 bytes @ 0x13
   411                           
   412  0033                     MFRC522_Clear_Bit@mask:	
   413                           ; 0 bytes @ 0x13
   414                           
   415  0033                     MFRC522_Set_Bit@mask:	
   416                           ; 1 bytes @ 0x13
   417                           
   418                           
   419                           ; 1 bytes @ 0x13
   420  0033                     	ds	1
   421  0034                     ??_MFRC522_Clear_Bit:	
   422  0034                     ??_MFRC522_Set_Bit:	
   423                           ; 0 bytes @ 0x14
   424                           
   425                           
   426                           ; 0 bytes @ 0x14
   427  0034                     	ds	1
   428  0035                     MFRC522_Set_Bit@addr:	
   429                           
   430                           ; 1 bytes @ 0x15
   431  0035                     	ds	1
   432  0036                     ??_MFRC522_AntennaOn:	
   433  0036                     MFRC522_Clear_Bit@addr:	
   434                           ; 0 bytes @ 0x16
   435                           
   436                           
   437                           ; 1 bytes @ 0x16
   438  0036                     	ds	1
   439  0037                     ??_MFRC522_Init:	
   440  0037                     ?_MFRC522_CRC:	
   441                           ; 0 bytes @ 0x17
   442                           
   443  0037                     ?_MFRC522_ToCard:	
   444                           ; 0 bytes @ 0x17
   445                           
   446  0037                     MFRC522_ToCard@sendData:	
   447                           ; 1 bytes @ 0x17
   448                           
   449  0037                     MFRC522_CRC@length:	
   450                           ; 1 bytes @ 0x17
   451                           
   452                           
   453                           ; 1 bytes @ 0x17
   454  0037                     	ds	1
   455  0038                     MFRC522_ToCard@sendLen:	
   456  0038                     MFRC522_CRC@dataOut:	
   457                           ; 1 bytes @ 0x18
   458                           
   459                           
   460                           ; 1 bytes @ 0x18
   461  0038                     	ds	1
   462  0039                     ??_MFRC522_CRC:	
   463  0039                     MFRC522_ToCard@backData:	
   464                           ; 0 bytes @ 0x19
   465                           
   466                           
   467                           ; 1 bytes @ 0x19
   468  0039                     	ds	1
   469  003A                     MFRC522_ToCard@backLen:	
   470  003A                     MFRC522_CRC@n:	
   471                           ; 1 bytes @ 0x1A
   472                           
   473                           
   474                           ; 1 bytes @ 0x1A
   475  003A                     	ds	1
   476  003B                     ??_MFRC522_ToCard:	
   477  003B                     MFRC522_CRC@i:	
   478                           ; 0 bytes @ 0x1B
   479                           
   480                           
   481                           ; 1 bytes @ 0x1B
   482  003B                     	ds	1
   483  003C                     MFRC522_CRC@dataIn:	
   484                           
   485                           ; 1 bytes @ 0x1C
   486  003C                     	ds	5
   487  0041                     MFRC522_ToCard@waitIRq:	
   488                           
   489                           ; 1 bytes @ 0x21
   490  0041                     	ds	1
   491  0042                     MFRC522_ToCard@_status:	
   492                           
   493                           ; 1 bytes @ 0x22
   494  0042                     	ds	1
   495  0043                     MFRC522_ToCard@lastBits:	
   496                           
   497                           ; 1 bytes @ 0x23
   498  0043                     	ds	1
   499  0044                     MFRC522_ToCard@irqEn:	
   500                           
   501                           ; 1 bytes @ 0x24
   502  0044                     	ds	1
   503  0045                     MFRC522_ToCard@command:	
   504                           
   505                           ; 1 bytes @ 0x25
   506  0045                     	ds	1
   507  0046                     MFRC522_ToCard@i:	
   508                           
   509                           ; 2 bytes @ 0x26
   510  0046                     	ds	2
   511  0048                     MFRC522_ToCard@n:	
   512                           
   513                           ; 1 bytes @ 0x28
   514  0048                     	ds	1
   515  0049                     ??_MFRC522_SelectTag:	
   516  0049                     ??_MFRC522_AntiColl:	
   517                           ; 0 bytes @ 0x29
   518                           
   519  0049                     ?_MFRC522_Request:	
   520                           ; 0 bytes @ 0x29
   521                           
   522  0049                     MFRC522_Request@TagType:	
   523                           ; 1 bytes @ 0x29
   524                           
   525                           
   526                           ; 1 bytes @ 0x29
   527  0049                     	ds	1
   528  004A                     ??_MFRC522_Request:	
   529                           
   530                           ; 0 bytes @ 0x2A
   531  004A                     	ds	4
   532  004E                     MFRC522_Request@reqMode:	
   533  004E                     MFRC522_AntiColl@serNumCheck:	
   534                           ; 1 bytes @ 0x2E
   535                           
   536  004E                     MFRC522_SelectTag@buffer:	
   537                           ; 1 bytes @ 0x2E
   538                           
   539                           
   540                           ; 9 bytes @ 0x2E
   541  004E                     	ds	1
   542  004F                     MFRC522_Request@_status:	
   543  004F                     MFRC522_AntiColl@unLen:	
   544                           ; 1 bytes @ 0x2F
   545                           
   546                           
   547                           ; 2 bytes @ 0x2F
   548  004F                     	ds	1
   549  0050                     MFRC522_Request@backBits:	
   550                           
   551                           ; 2 bytes @ 0x30
   552  0050                     	ds	1
   553  0051                     MFRC522_AntiColl@_status:	
   554                           
   555                           ; 1 bytes @ 0x31
   556  0051                     	ds	1
   557  0052                     ??_MFRC522_isCard:	
   558  0052                     MFRC522_AntiColl@i:	
   559                           ; 0 bytes @ 0x32
   560                           
   561                           
   562                           ; 1 bytes @ 0x32
   563  0052                     	ds	1
   564  0053                     MFRC522_AntiColl@serNum:	
   565  0053                     MFRC522_isCard@TagType:	
   566                           ; 1 bytes @ 0x33
   567                           
   568                           
   569                           ; 1 bytes @ 0x33
   570  0053                     	ds	1
   571  0054                     ??_MFRC522_ReadCardSerial:	
   572                           
   573                           ; 0 bytes @ 0x34
   574  0054                     	ds	1
   575  0055                     MFRC522_ReadCardSerial@_status:	
   576                           
   577                           ; 1 bytes @ 0x35
   578  0055                     	ds	1
   579  0056                     MFRC522_ReadCardSerial@str:	
   580                           
   581                           ; 1 bytes @ 0x36
   582  0056                     	ds	1
   583  0057                     MFRC522_SelectTag@_status:	
   584                           
   585                           ; 1 bytes @ 0x37
   586  0057                     	ds	1
   587  0058                     MFRC522_SelectTag@size:	
   588                           
   589                           ; 1 bytes @ 0x38
   590  0058                     	ds	1
   591  0059                     MFRC522_SelectTag@serNum:	
   592                           
   593                           ; 1 bytes @ 0x39
   594  0059                     	ds	1
   595  005A                     MFRC522_SelectTag@recvBits:	
   596                           
   597                           ; 2 bytes @ 0x3A
   598  005A                     	ds	2
   599  005C                     MFRC522_SelectTag@i:	
   600                           
   601                           ; 1 bytes @ 0x3C
   602  005C                     	ds	1
   603  005D                     ??_main:	
   604                           
   605                           ; 0 bytes @ 0x3D
   606  005D                     	ds	3
   607  0060                     main@size:	
   608                           
   609                           ; 1 bytes @ 0x40
   610  0060                     	ds	1
   611  0061                     main@UID:	
   612                           
   613                           ; 6 bytes @ 0x41
   614  0061                     	ds	6
   615  0067                     main@i:	
   616                           
   617                           ; 2 bytes @ 0x47
   618  0067                     	ds	2
   619  0069                     main@i_346:	
   620                           
   621                           ; 2 bytes @ 0x49
   622  0069                     	ds	2
   623  006B                     main@TagType:	
   624                           
   625                           ; 1 bytes @ 0x4B
   626  006B                     	ds	1
   627                           
   628                           	psect	maintext
   629  0610                     __pmaintext:	
   630 ;;
   631 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   632 ;;
   633 ;; *************** function _main *****************
   634 ;; Defined at:
   635 ;;		line 497 in file "main.c"
   636 ;; Parameters:    Size  Location     Type
   637 ;;		None
   638 ;; Auto vars:     Size  Location     Type
   639 ;;  i               2   73[BANK0 ] int 
   640 ;;  i               2   71[BANK0 ] int 
   641 ;;  UID             6   65[BANK0 ] unsigned char [6]
   642 ;;  TagType         1   75[BANK0 ] unsigned char 
   643 ;;  size            1   64[BANK0 ] unsigned char 
   644 ;; Return value:  Size  Location     Type
   645 ;;		None               void
   646 ;; Registers used:
   647 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   648 ;; Tracked objects:
   649 ;;		On entry : B00/0
   650 ;;		On exit  : 0/0
   651 ;;		Unchanged: 0/0
   652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   653 ;;      Params:         0       0       0       0
   654 ;;      Locals:         0      12       0       0
   655 ;;      Temps:          0       3       0       0
   656 ;;      Totals:         0      15       0       0
   657 ;;Total ram usage:       15 bytes
   658 ;; Hardware stack levels required when called:    7
   659 ;; This function calls:
   660 ;;		_MFRC522_Init
   661 ;;		_MFRC522_ReadCardSerial
   662 ;;		_MFRC522_SelectTag
   663 ;;		_MFRC522_isCard
   664 ;;		_SPI_init
   665 ;;		_UART_init
   666 ;;		_printf
   667 ;; This function is called by:
   668 ;;		Startup code after reset
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           
   673                           ;psect for function _main
   674  0610                     _main:	
   675                           
   676                           ;main.c: 499: char UID[6];
   677                           ;main.c: 500: unsigned char TagType;
   678                           ;main.c: 501: char size;
   679                           ;main.c: 503: UART_init();
   680                           
   681                           ;incstack = 0
   682                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   683  0610  226E               	fcall	_UART_init
   684                           
   685                           ;main.c: 505: SPI_init(0);
   686  0611  3000               	movlw	0
   687  0612  22CB               	fcall	_SPI_init
   688                           
   689                           ;main.c: 508: MFRC522_Init();
   690  0613  2352               	fcall	_MFRC522_Init
   691                           
   692                           ;main.c: 511: TRISBbits.TRISB3 = 0;
   693  0614  1683               	bsf	3,5	;RP0=1, select bank1
   694  0615  1303               	bcf	3,6	;RP1=0, select bank1
   695  0616  1186               	bcf	6,3	;volatile
   696                           
   697                           ;main.c: 512: for(int i=0;i<10;i++)
   698  0617  1283               	bcf	3,5	;RP0=0, select bank0
   699  0618  1303               	bcf	3,6	;RP1=0, select bank0
   700  0619  01E7               	clrf	main@i
   701  061A  01E8               	clrf	main@i+1
   702  061B  0868               	movf	main@i+1,w
   703  061C  3A80               	xorlw	128
   704  061D  00FF               	movwf	127
   705  061E  3080               	movlw	128
   706  061F  027F               	subwf	127,w
   707  0620  1D03               	skipz
   708  0621  2E24               	goto	u1775
   709  0622  300A               	movlw	10
   710  0623  0267               	subwf	main@i,w
   711  0624                     u1775:	
   712  0624  1803               	btfsc	3,0
   713  0625  2E59               	goto	l1881
   714  0626                     l1867:	
   715                           
   716                           ;main.c: 513: {
   717                           ;main.c: 514: printf("Ola mundo!");
   718  0626  301B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   719  0627  255E               	fcall	_printf
   720                           
   721                           ;main.c: 515: PORTBbits.RB3 = 1;
   722  0628  1283               	bcf	3,5	;RP0=0, select bank0
   723  0629  1303               	bcf	3,6	;RP1=0, select bank0
   724  062A  1586               	bsf	6,3	;volatile
   725                           
   726                           ;main.c: 516: _delay((unsigned long)((100)*(16000000/4000.0)));
   727  062B  3003               	movlw	3
   728  062C  00DF               	movwf	??_main+2
   729  062D  3008               	movlw	8
   730  062E  00DE               	movwf	??_main+1
   731  062F  3078               	movlw	120
   732  0630  00DD               	movwf	??_main
   733  0631                     u1837:	
   734  0631  0BDD               	decfsz	??_main,f
   735  0632  2E31               	goto	u1837
   736  0633  0BDE               	decfsz	??_main+1,f
   737  0634  2E31               	goto	u1837
   738  0635  0BDF               	decfsz	??_main+2,f
   739  0636  2E31               	goto	u1837
   740                           
   741                           ;main.c: 517: PORTBbits.RB3 = 0;
   742  0637  1283               	bcf	3,5	;RP0=0, select bank0
   743  0638  1303               	bcf	3,6	;RP1=0, select bank0
   744  0639  1186               	bcf	6,3	;volatile
   745                           
   746                           ;main.c: 518: _delay((unsigned long)((100)*(16000000/4000.0)));
   747  063A  3003               	movlw	3
   748  063B  00DF               	movwf	??_main+2
   749  063C  3008               	movlw	8
   750  063D  00DE               	movwf	??_main+1
   751  063E  3078               	movlw	120
   752  063F  00DD               	movwf	??_main
   753  0640                     u1847:	
   754  0640  0BDD               	decfsz	??_main,f
   755  0641  2E40               	goto	u1847
   756  0642  0BDE               	decfsz	??_main+1,f
   757  0643  2E40               	goto	u1847
   758  0644  0BDF               	decfsz	??_main+2,f
   759  0645  2E40               	goto	u1847
   760  0646  3001               	movlw	1
   761  0647  1283               	bcf	3,5	;RP0=0, select bank0
   762  0648  1303               	bcf	3,6	;RP1=0, select bank0
   763  0649  07E7               	addwf	main@i,f
   764  064A  1803               	skipnc
   765  064B  0AE8               	incf	main@i+1,f
   766  064C  3000               	movlw	0
   767  064D  07E8               	addwf	main@i+1,f
   768  064E  0868               	movf	main@i+1,w
   769  064F  3A80               	xorlw	128
   770  0650  00FF               	movwf	127
   771  0651  3080               	movlw	128
   772  0652  027F               	subwf	127,w
   773  0653  1D03               	skipz
   774  0654  2E57               	goto	u1785
   775  0655  300A               	movlw	10
   776  0656  0267               	subwf	main@i,w
   777  0657                     u1785:	
   778  0657  1C03               	skipc
   779  0658  2E26               	goto	l1867
   780  0659                     l1881:	
   781                           ;main.c: 519: }
   782                           ;main.c: 520: while(1)
   783                           
   784                           
   785                           ;main.c: 521: {
   786                           ;main.c: 522: printf(".");
   787  0659  303B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   788  065A  255E               	fcall	_printf
   789                           
   790                           ;main.c: 525: if( MFRC522_isCard( &TagType ) )
   791  065B  306B               	movlw	(low (main@TagType| 0))& (0+255)
   792  065C  224D               	fcall	_MFRC522_isCard
   793  065D  3A00               	xorlw	0
   794  065E  1903               	skipnz
   795  065F  2EB1               	goto	l1903
   796                           
   797                           ;main.c: 526: {
   798                           ;main.c: 528: printf("Tipo de Tag: %u",TagType);
   799  0660  1283               	bcf	3,5	;RP0=0, select bank0
   800  0661  1303               	bcf	3,6	;RP1=0, select bank0
   801  0662  086B               	movf	main@TagType,w
   802  0663  00DD               	movwf	??_main
   803  0664  01DE               	clrf	??_main+1
   804  0665  085D               	movf	??_main,w
   805  0666  00A0               	movwf	?_printf
   806  0667  085E               	movf	??_main+1,w
   807  0668  00A1               	movwf	?_printf+1
   808  0669  300B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   809  066A  255E               	fcall	_printf
   810                           
   811                           ;main.c: 530: if( MFRC522_ReadCardSerial( UID ) )
   812  066B  3061               	movlw	(low (main@UID| 0))& (0+255)
   813  066C  227F               	fcall	_MFRC522_ReadCardSerial
   814  066D  3A00               	xorlw	0
   815  066E  1903               	skipnz
   816  066F  2EB1               	goto	l1903
   817                           
   818                           ;main.c: 531: {
   819                           ;main.c: 532: PORTBbits.RB3 = 0;
   820  0670  1283               	bcf	3,5	;RP0=0, select bank0
   821  0671  1303               	bcf	3,6	;RP1=0, select bank0
   822  0672  1186               	bcf	6,3	;volatile
   823                           
   824                           ;main.c: 533: printf("Codigo: ");
   825  0673  3026               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   826  0674  255E               	fcall	_printf
   827                           
   828                           ;main.c: 534: for(int i=0; i < 5; i++)
   829  0675  1283               	bcf	3,5	;RP0=0, select bank0
   830  0676  1303               	bcf	3,6	;RP1=0, select bank0
   831  0677  01E9               	clrf	main@i_346
   832  0678  01EA               	clrf	main@i_346+1
   833  0679  086A               	movf	main@i_346+1,w
   834  067A  3A80               	xorlw	128
   835  067B  00FF               	movwf	127
   836  067C  3080               	movlw	128
   837  067D  027F               	subwf	127,w
   838  067E  1D03               	skipz
   839  067F  2E82               	goto	u1815
   840  0680  3005               	movlw	5
   841  0681  0269               	subwf	main@i_346,w
   842  0682                     u1815:	
   843  0682  1803               	btfsc	3,0
   844  0683  2EA8               	goto	l1901
   845  0684                     l1895:	
   846                           
   847                           ;main.c: 535: {
   848                           ;main.c: 536: printf("%d",(int)UID[i]);
   849  0684  1283               	bcf	3,5	;RP0=0, select bank0
   850  0685  1303               	bcf	3,6	;RP1=0, select bank0
   851  0686  0869               	movf	main@i_346,w
   852  0687  3E61               	addlw	(low (main@UID| 0))& (0+255)
   853  0688  0084               	movwf	4
   854  0689  1383               	bcf	3,7	;select IRP bank0
   855  068A  0800               	movf	0,w
   856  068B  00DD               	movwf	??_main
   857  068C  01DE               	clrf	??_main+1
   858  068D  085D               	movf	??_main,w
   859  068E  00A0               	movwf	?_printf
   860  068F  085E               	movf	??_main+1,w
   861  0690  00A1               	movwf	?_printf+1
   862  0691  3036               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   863  0692  255E               	fcall	_printf
   864                           
   865                           ;main.c: 537: printf(" ");
   866  0693  3034               	movlw	(low (((STR_1+5)-__stringbase)| (0+32768)))& (0+255)
   867  0694  255E               	fcall	_printf
   868  0695  3001               	movlw	1
   869  0696  1283               	bcf	3,5	;RP0=0, select bank0
   870  0697  1303               	bcf	3,6	;RP1=0, select bank0
   871  0698  07E9               	addwf	main@i_346,f
   872  0699  1803               	skipnc
   873  069A  0AEA               	incf	main@i_346+1,f
   874  069B  3000               	movlw	0
   875  069C  07EA               	addwf	main@i_346+1,f
   876  069D  086A               	movf	main@i_346+1,w
   877  069E  3A80               	xorlw	128
   878  069F  00FF               	movwf	127
   879  06A0  3080               	movlw	128
   880  06A1  027F               	subwf	127,w
   881  06A2  1D03               	skipz
   882  06A3  2EA6               	goto	u1825
   883  06A4  3005               	movlw	5
   884  06A5  0269               	subwf	main@i_346,w
   885  06A6                     u1825:	
   886  06A6  1C03               	skipc
   887  06A7  2E84               	goto	l1895
   888  06A8                     l1901:	
   889                           
   890                           ;main.c: 538: }
   891                           ;main.c: 539: printf("\n");
   892  06A8  3039               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
   893  06A9  255E               	fcall	_printf
   894                           
   895                           ;main.c: 540: size = MFRC522_SelectTag( UID );
   896  06AA  3061               	movlw	(low (main@UID| 0))& (0+255)
   897  06AB  2421               	fcall	_MFRC522_SelectTag
   898  06AC  1283               	bcf	3,5	;RP0=0, select bank0
   899  06AD  1303               	bcf	3,6	;RP1=0, select bank0
   900  06AE  00DD               	movwf	??_main
   901  06AF  085D               	movf	??_main,w
   902  06B0  00E0               	movwf	main@size
   903  06B1                     l1903:	
   904                           
   905                           ;main.c: 541: }
   906                           ;main.c: 544: }
   907                           ;main.c: 545: PORTBbits.RB3 = 1;
   908  06B1  1283               	bcf	3,5	;RP0=0, select bank0
   909  06B2  1303               	bcf	3,6	;RP1=0, select bank0
   910  06B3  1586               	bsf	6,3	;volatile
   911                           
   912                           ;main.c: 546: _delay((unsigned long)((250)*(16000000/4000.0)));
   913  06B4  3006               	movlw	6
   914  06B5  00DF               	movwf	??_main+2
   915  06B6  3013               	movlw	19
   916  06B7  00DE               	movwf	??_main+1
   917  06B8  30B1               	movlw	177
   918  06B9  00DD               	movwf	??_main
   919  06BA                     u1857:	
   920  06BA  0BDD               	decfsz	??_main,f
   921  06BB  2EBA               	goto	u1857
   922  06BC  0BDE               	decfsz	??_main+1,f
   923  06BD  2EBA               	goto	u1857
   924  06BE  0BDF               	decfsz	??_main+2,f
   925  06BF  2EBA               	goto	u1857
   926  06C0  2EC1               	nop2
   927  06C1  2E59               	goto	l1881
   928  06C2                     __end_of_main:	
   929                           
   930                           	psect	text1
   931  026E                     __ptext1:	
   932 ;; *************** function _UART_init *****************
   933 ;; Defined at:
   934 ;;		line 24 in file "UART.c"
   935 ;; Parameters:    Size  Location     Type
   936 ;;		None
   937 ;; Auto vars:     Size  Location     Type
   938 ;;		None
   939 ;; Return value:  Size  Location     Type
   940 ;;		None               void
   941 ;; Registers used:
   942 ;;		wreg
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   948 ;;      Params:         0       0       0       0
   949 ;;      Locals:         0       0       0       0
   950 ;;      Temps:          0       0       0       0
   951 ;;      Totals:         0       0       0       0
   952 ;;Total ram usage:        0 bytes
   953 ;; Hardware stack levels used:    1
   954 ;; This function calls:
   955 ;;		Nothing
   956 ;; This function is called by:
   957 ;;		_main
   958 ;; This function uses a non-reentrant model
   959 ;;
   960                           
   961                           
   962                           ;psect for function _UART_init
   963  026E                     _UART_init:	
   964                           
   965                           ;UART.c: 27: TRISBbits.TRISB1 = 1;
   966                           
   967                           ;incstack = 0
   968                           ; Regs used in _UART_init: [wreg]
   969  026E  1683               	bsf	3,5	;RP0=1, select bank1
   970  026F  1303               	bcf	3,6	;RP1=0, select bank1
   971  0270  1486               	bsf	6,1	;volatile
   972                           
   973                           ;UART.c: 28: TRISBbits.TRISB2 = 1;
   974  0271  1506               	bsf	6,2	;volatile
   975                           
   976                           ;UART.c: 32: TXSTAbits.CSRC = 1;
   977  0272  1798               	bsf	24,7	;volatile
   978                           
   979                           ;UART.c: 33: TXSTAbits.TXEN = 1;
   980  0273  1698               	bsf	24,5	;volatile
   981                           
   982                           ;UART.c: 34: TXSTAbits.SYNC = 0;
   983  0274  1218               	bcf	24,4	;volatile
   984                           
   985                           ;UART.c: 37: RCSTAbits.SPEN = 1;
   986  0275  1283               	bcf	3,5	;RP0=0, select bank0
   987  0276  1303               	bcf	3,6	;RP1=0, select bank0
   988  0277  1798               	bsf	24,7	;volatile
   989                           
   990                           ;UART.c: 38: RCSTAbits.CREN = 1;
   991  0278  1618               	bsf	24,4	;volatile
   992                           
   993                           ;UART.c: 41: TXSTAbits.BRGH = 0;
   994  0279  1683               	bsf	3,5	;RP0=1, select bank1
   995  027A  1303               	bcf	3,6	;RP1=0, select bank1
   996  027B  1118               	bcf	24,2	;volatile
   997                           
   998                           ;UART.c: 42: SPBRG = 25;
   999  027C  3019               	movlw	25
  1000  027D  0099               	movwf	25	;volatile
  1001  027E  0008               	return
  1002  027F                     __end_of_UART_init:	
  1003                           
  1004                           	psect	text2
  1005  02CB                     __ptext2:	
  1006 ;; *************** function _SPI_init *****************
  1007 ;; Defined at:
  1008 ;;		line 32 in file "SPI.c"
  1009 ;; Parameters:    Size  Location     Type
  1010 ;;  mode            1    wreg     unsigned char 
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;  mode            1    1[COMMON] unsigned char 
  1013 ;; Return value:  Size  Location     Type
  1014 ;;		None               void
  1015 ;; Registers used:
  1016 ;;		wreg, status,2, status,0
  1017 ;; Tracked objects:
  1018 ;;		On entry : 0/0
  1019 ;;		On exit  : 0/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1022 ;;      Params:         0       0       0       0
  1023 ;;      Locals:         1       0       0       0
  1024 ;;      Temps:          1       0       0       0
  1025 ;;      Totals:         2       0       0       0
  1026 ;;Total ram usage:        2 bytes
  1027 ;; Hardware stack levels used:    1
  1028 ;; This function calls:
  1029 ;;		Nothing
  1030 ;; This function is called by:
  1031 ;;		_main
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           
  1036                           ;psect for function _SPI_init
  1037  02CB                     _SPI_init:	
  1038                           
  1039                           ;incstack = 0
  1040                           ; Regs used in _SPI_init: [wreg+status,2+status,0]
  1041                           ;SPI_init@mode stored from wreg
  1042  02CB  00F1               	movwf	SPI_init@mode
  1043                           
  1044                           ;SPI.c: 34: _mode = mode;
  1045  02CC  0871               	movf	SPI_init@mode,w
  1046  02CD  00F0               	movwf	??_SPI_init
  1047  02CE  0870               	movf	??_SPI_init,w
  1048  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  1049  02D0  1303               	bcf	3,6	;RP1=0, select bank0
  1050  02D1  00EE               	movwf	__mode
  1051                           
  1052                           ;SPI.c: 35: TRISB &= ~(1<<7 | 1<<6);
  1053  02D2  303F               	movlw	63
  1054  02D3  00F0               	movwf	??_SPI_init
  1055  02D4  0870               	movf	??_SPI_init,w
  1056  02D5  1683               	bsf	3,5	;RP0=1, select bank1
  1057  02D6  1303               	bcf	3,6	;RP1=0, select bank1
  1058  02D7  0586               	andwf	6,f	;volatile
  1059                           
  1060                           ;SPI.c: 36: TRISB |= (1<<5);
  1061  02D8  1686               	bsf	6,5	;volatile
  1062                           
  1063                           ;SPI.c: 37: if(mode == 2 || mode == 3)
  1064  02D9  3002               	movlw	2
  1065  02DA  0671               	xorwf	SPI_init@mode,w
  1066  02DB  1903               	btfsc	3,2
  1067  02DC  2AE1               	goto	l70
  1068  02DD  3003               	movlw	3
  1069  02DE  0671               	xorwf	SPI_init@mode,w
  1070  02DF  1D03               	btfss	3,2
  1071  02E0  2AE5               	goto	l1683
  1072  02E1                     l70:	
  1073                           
  1074                           ;SPI.c: 38: PORTB |= (1<<7);
  1075  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  1076  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  1077  02E3  1786               	bsf	6,7	;volatile
  1078  02E4  0008               	return
  1079  02E5                     l1683:	
  1080                           
  1081                           ;SPI.c: 39: else
  1082                           ;SPI.c: 40: PORTB &= ~(1<<7);
  1083  02E5  307F               	movlw	127
  1084  02E6  00F0               	movwf	??_SPI_init
  1085  02E7  0870               	movf	??_SPI_init,w
  1086  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  1087  02E9  0586               	andwf	6,f	;volatile
  1088  02EA  0008               	return
  1089  02EB                     __end_of_SPI_init:	
  1090                           
  1091                           	psect	text3
  1092  024D                     __ptext3:	
  1093 ;; *************** function _MFRC522_isCard *****************
  1094 ;; Defined at:
  1095 ;;		line 476 in file "main.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;  TagType         1    wreg     PTR unsigned char 
  1098 ;;		 -> main@TagType(1), 
  1099 ;; Auto vars:     Size  Location     Type
  1100 ;;  TagType         1   51[BANK0 ] PTR unsigned char 
  1101 ;;		 -> main@TagType(1), 
  1102 ;; Return value:  Size  Location     Type
  1103 ;;                  1    wreg      unsigned char 
  1104 ;; Registers used:
  1105 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1106 ;; Tracked objects:
  1107 ;;		On entry : 0/0
  1108 ;;		On exit  : 0/0
  1109 ;;		Unchanged: 0/0
  1110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1111 ;;      Params:         0       0       0       0
  1112 ;;      Locals:         0       1       0       0
  1113 ;;      Temps:          0       1       0       0
  1114 ;;      Totals:         0       2       0       0
  1115 ;;Total ram usage:        2 bytes
  1116 ;; Hardware stack levels used:    1
  1117 ;; Hardware stack levels required when called:    6
  1118 ;; This function calls:
  1119 ;;		_MFRC522_Request
  1120 ;; This function is called by:
  1121 ;;		_main
  1122 ;; This function uses a non-reentrant model
  1123 ;;
  1124                           
  1125                           
  1126                           ;psect for function _MFRC522_isCard
  1127  024D                     _MFRC522_isCard:	
  1128                           
  1129                           ;incstack = 0
  1130                           ; Regs used in _MFRC522_isCard: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1131                           ;MFRC522_isCard@TagType stored from wreg
  1132  024D  1283               	bcf	3,5	;RP0=0, select bank0
  1133  024E  1303               	bcf	3,6	;RP1=0, select bank0
  1134  024F  00D3               	movwf	MFRC522_isCard@TagType
  1135                           
  1136                           ;main.c: 478: if (MFRC522_Request( 0x26, TagType ) == 0)
  1137  0250  0853               	movf	MFRC522_isCard@TagType,w
  1138  0251  00D2               	movwf	??_MFRC522_isCard
  1139  0252  0852               	movf	??_MFRC522_isCard,w
  1140  0253  00C9               	movwf	MFRC522_Request@TagType
  1141  0254  3026               	movlw	38
  1142  0255  231D               	fcall	_MFRC522_Request
  1143  0256  3A00               	xorlw	0
  1144  0257  1D03               	skipz
  1145  0258  2A5B               	goto	l1725
  1146                           
  1147                           ;main.c: 479: return 1;
  1148  0259  3001               	movlw	1
  1149  025A  0008               	return
  1150  025B                     l1725:	
  1151                           
  1152                           ;main.c: 480: else
  1153                           ;main.c: 481: return 0;
  1154  025B  3000               	movlw	0
  1155  025C  0008               	return
  1156  025D                     __end_of_MFRC522_isCard:	
  1157                           
  1158                           	psect	text4
  1159  031D                     __ptext4:	
  1160 ;; *************** function _MFRC522_Request *****************
  1161 ;; Defined at:
  1162 ;;		line 286 in file "main.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;  reqMode         1    wreg     unsigned char 
  1165 ;;  TagType         1   41[BANK0 ] PTR unsigned char 
  1166 ;;		 -> main@TagType(1), 
  1167 ;; Auto vars:     Size  Location     Type
  1168 ;;  reqMode         1   46[BANK0 ] unsigned char 
  1169 ;;  backBits        2   48[BANK0 ] unsigned int 
  1170 ;;  _status         1   47[BANK0 ] unsigned char 
  1171 ;; Return value:  Size  Location     Type
  1172 ;;                  1    wreg      unsigned char 
  1173 ;; Registers used:
  1174 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1175 ;; Tracked objects:
  1176 ;;		On entry : 0/0
  1177 ;;		On exit  : 0/0
  1178 ;;		Unchanged: 0/0
  1179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1180 ;;      Params:         0       1       0       0
  1181 ;;      Locals:         0       4       0       0
  1182 ;;      Temps:          0       4       0       0
  1183 ;;      Totals:         0       9       0       0
  1184 ;;Total ram usage:        9 bytes
  1185 ;; Hardware stack levels used:    1
  1186 ;; Hardware stack levels required when called:    5
  1187 ;; This function calls:
  1188 ;;		_MFRC522_ToCard
  1189 ;;		_MFRC522_Wr
  1190 ;; This function is called by:
  1191 ;;		_MFRC522_isCard
  1192 ;; This function uses a non-reentrant model
  1193 ;;
  1194                           
  1195                           
  1196                           ;psect for function _MFRC522_Request
  1197  031D                     _MFRC522_Request:	
  1198                           
  1199                           ;incstack = 0
  1200                           ; Regs used in _MFRC522_Request: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1201                           ;MFRC522_Request@reqMode stored from wreg
  1202  031D  1283               	bcf	3,5	;RP0=0, select bank0
  1203  031E  1303               	bcf	3,6	;RP1=0, select bank0
  1204  031F  00CE               	movwf	MFRC522_Request@reqMode
  1205                           
  1206                           ;main.c: 288: char _status;
  1207                           ;main.c: 289: unsigned backBits;
  1208                           ;main.c: 290: MFRC522_Wr( 0x0D, 0x07 );
  1209  0320  3007               	movlw	7
  1210  0321  00CA               	movwf	??_MFRC522_Request
  1211  0322  084A               	movf	??_MFRC522_Request,w
  1212  0323  00B0               	movwf	MFRC522_Wr@value
  1213  0324  300D               	movlw	13
  1214  0325  225D               	fcall	_MFRC522_Wr
  1215                           
  1216                           ;main.c: 291: TagType[0] = reqMode;
  1217  0326  1283               	bcf	3,5	;RP0=0, select bank0
  1218  0327  1303               	bcf	3,6	;RP1=0, select bank0
  1219  0328  084E               	movf	MFRC522_Request@reqMode,w
  1220  0329  00CA               	movwf	??_MFRC522_Request
  1221  032A  0849               	movf	MFRC522_Request@TagType,w
  1222  032B  0084               	movwf	4
  1223  032C  084A               	movf	??_MFRC522_Request,w
  1224  032D  1383               	bcf	3,7	;select IRP bank0
  1225  032E  0080               	movwf	0
  1226                           
  1227                           ;main.c: 292: _status = MFRC522_ToCard( 0x0C, TagType, 1, TagType, &backBits );
  1228  032F  0849               	movf	MFRC522_Request@TagType,w
  1229  0330  00CA               	movwf	??_MFRC522_Request
  1230  0331  084A               	movf	??_MFRC522_Request,w
  1231  0332  00B7               	movwf	MFRC522_ToCard@sendData
  1232  0333  01B8               	clrf	MFRC522_ToCard@sendLen
  1233  0334  0AB8               	incf	MFRC522_ToCard@sendLen,f
  1234  0335  0849               	movf	MFRC522_Request@TagType,w
  1235  0336  00CB               	movwf	??_MFRC522_Request+1
  1236  0337  084B               	movf	??_MFRC522_Request+1,w
  1237  0338  00B9               	movwf	MFRC522_ToCard@backData
  1238  0339  3050               	movlw	(low (MFRC522_Request@backBits| 0))& (0+255)
  1239  033A  00CC               	movwf	??_MFRC522_Request+2
  1240  033B  084C               	movf	??_MFRC522_Request+2,w
  1241  033C  00BA               	movwf	MFRC522_ToCard@backLen
  1242  033D  300C               	movlw	12
  1243  033E  26C2               	fcall	_MFRC522_ToCard
  1244  033F  1283               	bcf	3,5	;RP0=0, select bank0
  1245  0340  1303               	bcf	3,6	;RP1=0, select bank0
  1246  0341  00CD               	movwf	??_MFRC522_Request+3
  1247  0342  084D               	movf	??_MFRC522_Request+3,w
  1248  0343  00CF               	movwf	MFRC522_Request@_status
  1249                           
  1250                           ;main.c: 293: if ( (_status != 0) || (backBits != 0x10) )
  1251  0344  084F               	movf	MFRC522_Request@_status,w
  1252  0345  1D03               	btfss	3,2
  1253  0346  2B4C               	goto	l1607
  1254  0347  3010               	movlw	16
  1255  0348  0650               	xorwf	MFRC522_Request@backBits,w
  1256  0349  0451               	iorwf	MFRC522_Request@backBits+1,w
  1257  034A  1903               	btfsc	3,2
  1258  034B  2B50               	goto	l144
  1259  034C                     l1607:	
  1260                           
  1261                           ;main.c: 294: {
  1262                           ;main.c: 295: _status = 2;
  1263  034C  3002               	movlw	2
  1264  034D  00CA               	movwf	??_MFRC522_Request
  1265  034E  084A               	movf	??_MFRC522_Request,w
  1266  034F  00CF               	movwf	MFRC522_Request@_status
  1267  0350                     l144:	
  1268                           
  1269                           ;main.c: 296: }
  1270                           ;main.c: 297: return _status;
  1271  0350  084F               	movf	MFRC522_Request@_status,w
  1272  0351  0008               	return
  1273  0352                     __end_of_MFRC522_Request:	
  1274                           
  1275                           	psect	text5
  1276  0421                     __ptext5:	
  1277 ;; *************** function _MFRC522_SelectTag *****************
  1278 ;; Defined at:
  1279 ;;		line 325 in file "main.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;  serNum          1    wreg     PTR unsigned char 
  1282 ;;		 -> main@UID(6), 
  1283 ;; Auto vars:     Size  Location     Type
  1284 ;;  serNum          1   57[BANK0 ] PTR unsigned char 
  1285 ;;		 -> main@UID(6), 
  1286 ;;  buffer          9   46[BANK0 ] unsigned char [9]
  1287 ;;  recvBits        2   58[BANK0 ] unsigned int 
  1288 ;;  i               1   60[BANK0 ] unsigned char 
  1289 ;;  size            1   56[BANK0 ] unsigned char 
  1290 ;;  _status         1   55[BANK0 ] unsigned char 
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  1    wreg      unsigned char 
  1293 ;; Registers used:
  1294 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1295 ;; Tracked objects:
  1296 ;;		On entry : 0/0
  1297 ;;		On exit  : 0/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1300 ;;      Params:         0       0       0       0
  1301 ;;      Locals:         0      15       0       0
  1302 ;;      Temps:          0       5       0       0
  1303 ;;      Totals:         0      20       0       0
  1304 ;;Total ram usage:       20 bytes
  1305 ;; Hardware stack levels used:    1
  1306 ;; Hardware stack levels required when called:    5
  1307 ;; This function calls:
  1308 ;;		_MFRC522_CRC
  1309 ;;		_MFRC522_ToCard
  1310 ;; This function is called by:
  1311 ;;		_main
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           
  1316                           ;psect for function _MFRC522_SelectTag
  1317  0421                     _MFRC522_SelectTag:	
  1318                           
  1319                           ;incstack = 0
  1320                           ; Regs used in _MFRC522_SelectTag: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1321                           ;MFRC522_SelectTag@serNum stored from wreg
  1322  0421  1283               	bcf	3,5	;RP0=0, select bank0
  1323  0422  1303               	bcf	3,6	;RP1=0, select bank0
  1324  0423  00D9               	movwf	MFRC522_SelectTag@serNum
  1325                           
  1326                           ;main.c: 327: char i;
  1327                           ;main.c: 328: char _status;
  1328                           ;main.c: 329: char size;
  1329                           ;main.c: 330: unsigned recvBits;
  1330                           ;main.c: 331: char buffer[9];
  1331                           ;main.c: 335: buffer[0] = 0x93;
  1332  0424  3093               	movlw	147
  1333  0425  00C9               	movwf	??_MFRC522_SelectTag
  1334  0426  0849               	movf	??_MFRC522_SelectTag,w
  1335  0427  00CE               	movwf	MFRC522_SelectTag@buffer
  1336                           
  1337                           ;main.c: 336: buffer[1] = 0x70;
  1338  0428  3070               	movlw	112
  1339  0429  00C9               	movwf	??_MFRC522_SelectTag
  1340  042A  0849               	movf	??_MFRC522_SelectTag,w
  1341  042B  00CF               	movwf	MFRC522_SelectTag@buffer+1
  1342                           
  1343                           ;main.c: 338: for ( i=2; i < 7; i++ )
  1344  042C  3002               	movlw	2
  1345  042D  00C9               	movwf	??_MFRC522_SelectTag
  1346  042E  0849               	movf	??_MFRC522_SelectTag,w
  1347  042F  00DC               	movwf	MFRC522_SelectTag@i
  1348  0430  3007               	movlw	7
  1349  0431  025C               	subwf	MFRC522_SelectTag@i,w
  1350  0432  1803               	btfsc	3,0
  1351  0433  2C4A               	goto	l1703
  1352  0434                     l1695:	
  1353                           
  1354                           ;main.c: 339: {
  1355                           ;main.c: 340: buffer[i] = *serNum++;
  1356  0434  0859               	movf	MFRC522_SelectTag@serNum,w
  1357  0435  0084               	movwf	4
  1358  0436  1383               	bcf	3,7	;select IRP bank0
  1359  0437  0800               	movf	0,w
  1360  0438  00C9               	movwf	??_MFRC522_SelectTag
  1361  0439  085C               	movf	MFRC522_SelectTag@i,w
  1362  043A  3E4E               	addlw	(low (MFRC522_SelectTag@buffer| 0))& (0+255)
  1363  043B  0084               	movwf	4
  1364  043C  0849               	movf	??_MFRC522_SelectTag,w
  1365  043D  0080               	movwf	0
  1366  043E  3001               	movlw	1
  1367  043F  00C9               	movwf	??_MFRC522_SelectTag
  1368  0440  0849               	movf	??_MFRC522_SelectTag,w
  1369  0441  07D9               	addwf	MFRC522_SelectTag@serNum,f
  1370  0442  3001               	movlw	1
  1371  0443  00C9               	movwf	??_MFRC522_SelectTag
  1372  0444  0849               	movf	??_MFRC522_SelectTag,w
  1373  0445  07DC               	addwf	MFRC522_SelectTag@i,f
  1374  0446  3007               	movlw	7
  1375  0447  025C               	subwf	MFRC522_SelectTag@i,w
  1376  0448  1C03               	skipc
  1377  0449  2C34               	goto	l1695
  1378  044A                     l1703:	
  1379                           
  1380                           ;main.c: 341: }
  1381                           ;main.c: 343: MFRC522_CRC( buffer, 7, &buffer[7] );
  1382  044A  3007               	movlw	7
  1383  044B  00C9               	movwf	??_MFRC522_SelectTag
  1384  044C  0849               	movf	??_MFRC522_SelectTag,w
  1385  044D  00B7               	movwf	MFRC522_CRC@length
  1386  044E  3055               	movlw	(low ((MFRC522_SelectTag@buffer| 0+7)))& (0+255)
  1387  044F  00CA               	movwf	??_MFRC522_SelectTag+1
  1388  0450  084A               	movf	??_MFRC522_SelectTag+1,w
  1389  0451  00B8               	movwf	MFRC522_CRC@dataOut
  1390  0452  304E               	movlw	(low (MFRC522_SelectTag@buffer| 0))& (0+255)
  1391  0453  23C6               	fcall	_MFRC522_CRC
  1392                           
  1393                           ;main.c: 345: _status = MFRC522_ToCard( 0x0C, buffer, 9, buffer, &recvBits );
  1394  0454  304E               	movlw	(low (MFRC522_SelectTag@buffer| 0))& (0+255)
  1395  0455  1283               	bcf	3,5	;RP0=0, select bank0
  1396  0456  1303               	bcf	3,6	;RP1=0, select bank0
  1397  0457  00C9               	movwf	??_MFRC522_SelectTag
  1398  0458  0849               	movf	??_MFRC522_SelectTag,w
  1399  0459  00B7               	movwf	MFRC522_ToCard@sendData
  1400  045A  3009               	movlw	9
  1401  045B  00CA               	movwf	??_MFRC522_SelectTag+1
  1402  045C  084A               	movf	??_MFRC522_SelectTag+1,w
  1403  045D  00B8               	movwf	MFRC522_ToCard@sendLen
  1404  045E  304E               	movlw	(low (MFRC522_SelectTag@buffer| 0))& (0+255)
  1405  045F  00CB               	movwf	??_MFRC522_SelectTag+2
  1406  0460  084B               	movf	??_MFRC522_SelectTag+2,w
  1407  0461  00B9               	movwf	MFRC522_ToCard@backData
  1408  0462  305A               	movlw	(low (MFRC522_SelectTag@recvBits| 0))& (0+255)
  1409  0463  00CC               	movwf	??_MFRC522_SelectTag+3
  1410  0464  084C               	movf	??_MFRC522_SelectTag+3,w
  1411  0465  00BA               	movwf	MFRC522_ToCard@backLen
  1412  0466  300C               	movlw	12
  1413  0467  26C2               	fcall	_MFRC522_ToCard
  1414  0468  1283               	bcf	3,5	;RP0=0, select bank0
  1415  0469  1303               	bcf	3,6	;RP1=0, select bank0
  1416  046A  00CD               	movwf	??_MFRC522_SelectTag+4
  1417  046B  084D               	movf	??_MFRC522_SelectTag+4,w
  1418  046C  00D7               	movwf	MFRC522_SelectTag@_status
  1419                           
  1420                           ;main.c: 346: if ( (_status == 0) && (recvBits == 0x18) )
  1421  046D  0857               	movf	MFRC522_SelectTag@_status,w
  1422  046E  1D03               	btfss	3,2
  1423  046F  2C7A               	goto	l1711
  1424  0470  3018               	movlw	24
  1425  0471  065A               	xorwf	MFRC522_SelectTag@recvBits,w
  1426  0472  045B               	iorwf	MFRC522_SelectTag@recvBits+1,w
  1427  0473  1D03               	btfss	3,2
  1428  0474  2C7A               	goto	l1711
  1429                           
  1430                           ;main.c: 347: {
  1431                           ;main.c: 348: size = buffer[0];
  1432  0475  084E               	movf	MFRC522_SelectTag@buffer,w
  1433  0476  00C9               	movwf	??_MFRC522_SelectTag
  1434  0477  0849               	movf	??_MFRC522_SelectTag,w
  1435  0478  00D8               	movwf	MFRC522_SelectTag@size
  1436                           
  1437                           ;main.c: 349: }
  1438  0479  2C7B               	goto	l1713
  1439  047A                     l1711:	
  1440                           
  1441                           ;main.c: 350: else
  1442                           ;main.c: 351: {
  1443                           ;main.c: 352: size = 0;
  1444  047A  01D8               	clrf	MFRC522_SelectTag@size
  1445  047B                     l1713:	
  1446                           
  1447                           ;main.c: 353: }
  1448                           ;main.c: 354: return size;
  1449  047B  0858               	movf	MFRC522_SelectTag@size,w
  1450  047C  0008               	return
  1451  047D                     __end_of_MFRC522_SelectTag:	
  1452                           
  1453                           	psect	text6
  1454  03C6                     __ptext6:	
  1455 ;; *************** function _MFRC522_CRC *****************
  1456 ;; Defined at:
  1457 ;;		line 299 in file "main.c"
  1458 ;; Parameters:    Size  Location     Type
  1459 ;;  dataIn          1    wreg     PTR unsigned char 
  1460 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  1461 ;;  length          1   23[BANK0 ] unsigned char 
  1462 ;;  dataOut         1   24[BANK0 ] PTR unsigned char 
  1463 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  1464 ;; Auto vars:     Size  Location     Type
  1465 ;;  dataIn          1   28[BANK0 ] PTR unsigned char 
  1466 ;;		 -> MFRC522_Write@buff(18), MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  1467 ;;  i               1   27[BANK0 ] unsigned char 
  1468 ;;  n               1   26[BANK0 ] unsigned char 
  1469 ;; Return value:  Size  Location     Type
  1470 ;;		None               void
  1471 ;; Registers used:
  1472 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1478 ;;      Params:         0       2       0       0
  1479 ;;      Locals:         0       3       0       0
  1480 ;;      Temps:          0       1       0       0
  1481 ;;      Totals:         0       6       0       0
  1482 ;;Total ram usage:        6 bytes
  1483 ;; Hardware stack levels used:    1
  1484 ;; Hardware stack levels required when called:    4
  1485 ;; This function calls:
  1486 ;;		_MFRC522_Clear_Bit
  1487 ;;		_MFRC522_Rd
  1488 ;;		_MFRC522_Set_Bit
  1489 ;;		_MFRC522_Wr
  1490 ;; This function is called by:
  1491 ;;		_MFRC522_SelectTag
  1492 ;;		_MFRC522_Halt
  1493 ;;		_MFRC522_Write
  1494 ;;		_MFRC522_Read
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498                           
  1499                           ;psect for function _MFRC522_CRC
  1500  03C6                     _MFRC522_CRC:	
  1501                           
  1502                           ;incstack = 0
  1503                           ; Regs used in _MFRC522_CRC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1504                           ;MFRC522_CRC@dataIn stored from wreg
  1505  03C6  1283               	bcf	3,5	;RP0=0, select bank0
  1506  03C7  1303               	bcf	3,6	;RP1=0, select bank0
  1507  03C8  00BC               	movwf	MFRC522_CRC@dataIn
  1508                           
  1509                           ;main.c: 301: char i, n;
  1510                           ;main.c: 302: MFRC522_Clear_Bit( 0x05, 0x04 );
  1511  03C9  3004               	movlw	4
  1512  03CA  00B9               	movwf	??_MFRC522_CRC
  1513  03CB  0839               	movf	??_MFRC522_CRC,w
  1514  03CC  00B3               	movwf	MFRC522_Clear_Bit@mask
  1515  03CD  3005               	movlw	5
  1516  03CE  223D               	fcall	_MFRC522_Clear_Bit
  1517                           
  1518                           ;main.c: 303: MFRC522_Set_Bit( 0x0A, 0x80 );
  1519  03CF  3080               	movlw	128
  1520  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  1521  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  1522  03D2  00B9               	movwf	??_MFRC522_CRC
  1523  03D3  0839               	movf	??_MFRC522_CRC,w
  1524  03D4  00B3               	movwf	MFRC522_Set_Bit@mask
  1525  03D5  300A               	movlw	10
  1526  03D6  222F               	fcall	_MFRC522_Set_Bit
  1527                           
  1528                           ;main.c: 306: for ( i = 0; i < length; i++ )
  1529  03D7  1283               	bcf	3,5	;RP0=0, select bank0
  1530  03D8  1303               	bcf	3,6	;RP1=0, select bank0
  1531  03D9  01BB               	clrf	MFRC522_CRC@i
  1532  03DA                     l1621:	
  1533  03DA  0837               	movf	MFRC522_CRC@length,w
  1534  03DB  023B               	subwf	MFRC522_CRC@i,w
  1535  03DC  1803               	btfsc	3,0
  1536  03DD  2BF2               	goto	l1623
  1537                           
  1538                           ;main.c: 307: {
  1539                           ;main.c: 308: MFRC522_Wr( 0x09, *dataIn++ );
  1540  03DE  083C               	movf	MFRC522_CRC@dataIn,w
  1541  03DF  0084               	movwf	4
  1542  03E0  1383               	bcf	3,7	;select IRP bank0
  1543  03E1  0800               	movf	0,w
  1544  03E2  00B9               	movwf	??_MFRC522_CRC
  1545  03E3  0839               	movf	??_MFRC522_CRC,w
  1546  03E4  00B0               	movwf	MFRC522_Wr@value
  1547  03E5  3009               	movlw	9
  1548  03E6  225D               	fcall	_MFRC522_Wr
  1549  03E7  3001               	movlw	1
  1550  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  1551  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  1552  03EA  00B9               	movwf	??_MFRC522_CRC
  1553  03EB  0839               	movf	??_MFRC522_CRC,w
  1554  03EC  07BC               	addwf	MFRC522_CRC@dataIn,f
  1555  03ED  3001               	movlw	1
  1556  03EE  00B9               	movwf	??_MFRC522_CRC
  1557  03EF  0839               	movf	??_MFRC522_CRC,w
  1558  03F0  07BB               	addwf	MFRC522_CRC@i,f
  1559  03F1  2BDA               	goto	l1621
  1560  03F2                     l1623:	
  1561                           
  1562                           ;main.c: 309: }
  1563                           ;main.c: 311: MFRC522_Wr( 0x01, 0x03 );
  1564  03F2  3003               	movlw	3
  1565  03F3  00B9               	movwf	??_MFRC522_CRC
  1566  03F4  0839               	movf	??_MFRC522_CRC,w
  1567  03F5  00B0               	movwf	MFRC522_Wr@value
  1568  03F6  3001               	movlw	1
  1569  03F7  225D               	fcall	_MFRC522_Wr
  1570                           
  1571                           ;main.c: 313: i = 0xFF;
  1572  03F8  30FF               	movlw	255
  1573  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  1574  03FA  1303               	bcf	3,6	;RP1=0, select bank0
  1575  03FB  00B9               	movwf	??_MFRC522_CRC
  1576  03FC  0839               	movf	??_MFRC522_CRC,w
  1577  03FD  00BB               	movwf	MFRC522_CRC@i
  1578  03FE                     l1627:	
  1579                           ;main.c: 315: do
  1580                           
  1581                           
  1582                           ;main.c: 316: {
  1583                           ;main.c: 317: n = MFRC522_Rd( 0x05 );
  1584  03FE  3005               	movlw	5
  1585  03FF  22AC               	fcall	_MFRC522_Rd
  1586  0400  1283               	bcf	3,5	;RP0=0, select bank0
  1587  0401  1303               	bcf	3,6	;RP1=0, select bank0
  1588  0402  00B9               	movwf	??_MFRC522_CRC
  1589  0403  0839               	movf	??_MFRC522_CRC,w
  1590  0404  00BA               	movwf	MFRC522_CRC@n
  1591                           
  1592                           ;main.c: 318: i--;
  1593  0405  3001               	movlw	1
  1594  0406  02BB               	subwf	MFRC522_CRC@i,f
  1595                           
  1596                           ;main.c: 319: }
  1597                           ;main.c: 320: while( i && !(n & 0x04) );
  1598  0407  083B               	movf	MFRC522_CRC@i,w
  1599  0408  1903               	btfsc	3,2
  1600  0409  2C0C               	goto	l1635
  1601  040A  1D3A               	btfss	MFRC522_CRC@n,2
  1602  040B  2BFE               	goto	l1627
  1603  040C                     l1635:	
  1604                           
  1605                           ;main.c: 322: dataOut[0] = MFRC522_Rd( 0x22 );
  1606  040C  3022               	movlw	34
  1607  040D  22AC               	fcall	_MFRC522_Rd
  1608  040E  1283               	bcf	3,5	;RP0=0, select bank0
  1609  040F  1303               	bcf	3,6	;RP1=0, select bank0
  1610  0410  00B9               	movwf	??_MFRC522_CRC
  1611  0411  0838               	movf	MFRC522_CRC@dataOut,w
  1612  0412  0084               	movwf	4
  1613  0413  0839               	movf	??_MFRC522_CRC,w
  1614  0414  1383               	bcf	3,7	;select IRP bank0
  1615  0415  0080               	movwf	0
  1616                           
  1617                           ;main.c: 323: dataOut[1] = MFRC522_Rd( 0x21 );
  1618  0416  3021               	movlw	33
  1619  0417  22AC               	fcall	_MFRC522_Rd
  1620  0418  1283               	bcf	3,5	;RP0=0, select bank0
  1621  0419  1303               	bcf	3,6	;RP1=0, select bank0
  1622  041A  00B9               	movwf	??_MFRC522_CRC
  1623  041B  0A38               	incf	MFRC522_CRC@dataOut,w
  1624  041C  0084               	movwf	4
  1625  041D  0839               	movf	??_MFRC522_CRC,w
  1626  041E  1383               	bcf	3,7	;select IRP bank0
  1627  041F  0080               	movwf	0
  1628  0420  0008               	return
  1629  0421                     __end_of_MFRC522_CRC:	
  1630                           
  1631                           	psect	text7
  1632  027F                     __ptext7:	
  1633 ;; *************** function _MFRC522_ReadCardSerial *****************
  1634 ;; Defined at:
  1635 ;;		line 483 in file "main.c"
  1636 ;; Parameters:    Size  Location     Type
  1637 ;;  str             1    wreg     PTR unsigned char 
  1638 ;;		 -> main@UID(6), 
  1639 ;; Auto vars:     Size  Location     Type
  1640 ;;  str             1   54[BANK0 ] PTR unsigned char 
  1641 ;;		 -> main@UID(6), 
  1642 ;;  _status         1   53[BANK0 ] unsigned char 
  1643 ;; Return value:  Size  Location     Type
  1644 ;;                  1    wreg      unsigned char 
  1645 ;; Registers used:
  1646 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1647 ;; Tracked objects:
  1648 ;;		On entry : 0/0
  1649 ;;		On exit  : 0/0
  1650 ;;		Unchanged: 0/0
  1651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1652 ;;      Params:         0       0       0       0
  1653 ;;      Locals:         0       2       0       0
  1654 ;;      Temps:          0       1       0       0
  1655 ;;      Totals:         0       3       0       0
  1656 ;;Total ram usage:        3 bytes
  1657 ;; Hardware stack levels used:    1
  1658 ;; Hardware stack levels required when called:    6
  1659 ;; This function calls:
  1660 ;;		_MFRC522_AntiColl
  1661 ;; This function is called by:
  1662 ;;		_main
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           
  1667                           ;psect for function _MFRC522_ReadCardSerial
  1668  027F                     _MFRC522_ReadCardSerial:	
  1669                           
  1670                           ;incstack = 0
  1671                           ; Regs used in _MFRC522_ReadCardSerial: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  1672                           ;MFRC522_ReadCardSerial@str stored from wreg
  1673  027F  1283               	bcf	3,5	;RP0=0, select bank0
  1674  0280  1303               	bcf	3,6	;RP1=0, select bank0
  1675  0281  00D6               	movwf	MFRC522_ReadCardSerial@str
  1676                           
  1677                           ;main.c: 485: char _status;
  1678                           ;main.c: 486: _status = MFRC522_AntiColl( str );
  1679  0282  0856               	movf	MFRC522_ReadCardSerial@str,w
  1680  0283  247D               	fcall	_MFRC522_AntiColl
  1681  0284  1283               	bcf	3,5	;RP0=0, select bank0
  1682  0285  1303               	bcf	3,6	;RP1=0, select bank0
  1683  0286  00D4               	movwf	??_MFRC522_ReadCardSerial
  1684  0287  0854               	movf	??_MFRC522_ReadCardSerial,w
  1685  0288  00D5               	movwf	MFRC522_ReadCardSerial@_status
  1686                           
  1687                           ;main.c: 487: str[5] = 0;
  1688  0289  0856               	movf	MFRC522_ReadCardSerial@str,w
  1689  028A  3E05               	addlw	5
  1690  028B  0084               	movwf	4
  1691  028C  1383               	bcf	3,7	;select IRP bank0
  1692  028D  0180               	clrf	0
  1693                           
  1694                           ;main.c: 488: if (_status == 0)
  1695  028E  0855               	movf	MFRC522_ReadCardSerial@_status,w
  1696  028F  1D03               	btfss	3,2
  1697  0290  2A93               	goto	l1741
  1698                           
  1699                           ;main.c: 489: return 1;
  1700  0291  3001               	movlw	1
  1701  0292  0008               	return
  1702  0293                     l1741:	
  1703                           
  1704                           ;main.c: 490: else
  1705                           ;main.c: 491: return 0;
  1706  0293  3000               	movlw	0
  1707  0294  0008               	return
  1708  0295                     __end_of_MFRC522_ReadCardSerial:	
  1709                           
  1710                           	psect	text8
  1711  047D                     __ptext8:	
  1712 ;; *************** function _MFRC522_AntiColl *****************
  1713 ;; Defined at:
  1714 ;;		line 446 in file "main.c"
  1715 ;; Parameters:    Size  Location     Type
  1716 ;;  serNum          1    wreg     PTR unsigned char 
  1717 ;;		 -> main@UID(6), 
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;  serNum          1   51[BANK0 ] PTR unsigned char 
  1720 ;;		 -> main@UID(6), 
  1721 ;;  unLen           2   47[BANK0 ] unsigned int 
  1722 ;;  i               1   50[BANK0 ] unsigned char 
  1723 ;;  _status         1   49[BANK0 ] unsigned char 
  1724 ;;  serNumCheck     1   46[BANK0 ] unsigned char 
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  1    wreg      unsigned char 
  1727 ;; Registers used:
  1728 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1734 ;;      Params:         0       0       0       0
  1735 ;;      Locals:         0       6       0       0
  1736 ;;      Temps:          0       5       0       0
  1737 ;;      Totals:         0      11       0       0
  1738 ;;Total ram usage:       11 bytes
  1739 ;; Hardware stack levels used:    1
  1740 ;; Hardware stack levels required when called:    5
  1741 ;; This function calls:
  1742 ;;		_MFRC522_Clear_Bit
  1743 ;;		_MFRC522_ToCard
  1744 ;;		_MFRC522_Wr
  1745 ;; This function is called by:
  1746 ;;		_MFRC522_ReadCardSerial
  1747 ;; This function uses a non-reentrant model
  1748 ;;
  1749                           
  1750                           
  1751                           ;psect for function _MFRC522_AntiColl
  1752  047D                     _MFRC522_AntiColl:	
  1753                           
  1754                           ;incstack = 0
  1755                           ; Regs used in _MFRC522_AntiColl: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1756                           ;MFRC522_AntiColl@serNum stored from wreg
  1757  047D  1283               	bcf	3,5	;RP0=0, select bank0
  1758  047E  1303               	bcf	3,6	;RP1=0, select bank0
  1759  047F  00D3               	movwf	MFRC522_AntiColl@serNum
  1760                           
  1761                           ;main.c: 448: char _status;
  1762                           ;main.c: 449: char i;
  1763                           ;main.c: 450: char serNumCheck = 0;
  1764  0480  01CE               	clrf	MFRC522_AntiColl@serNumCheck
  1765                           
  1766                           ;main.c: 451: unsigned unLen;
  1767                           ;main.c: 452: MFRC522_Wr( 0x0D, 0x00 );
  1768  0481  01B0               	clrf	MFRC522_Wr@value
  1769  0482  300D               	movlw	13
  1770  0483  225D               	fcall	_MFRC522_Wr
  1771                           
  1772                           ;main.c: 453: serNum[0] = 0x93;
  1773  0484  3093               	movlw	147
  1774  0485  1283               	bcf	3,5	;RP0=0, select bank0
  1775  0486  1303               	bcf	3,6	;RP1=0, select bank0
  1776  0487  00C9               	movwf	??_MFRC522_AntiColl
  1777  0488  0853               	movf	MFRC522_AntiColl@serNum,w
  1778  0489  0084               	movwf	4
  1779  048A  0849               	movf	??_MFRC522_AntiColl,w
  1780  048B  1383               	bcf	3,7	;select IRP bank0
  1781  048C  0080               	movwf	0
  1782                           
  1783                           ;main.c: 454: serNum[1] = 0x20;
  1784  048D  3020               	movlw	32
  1785  048E  00C9               	movwf	??_MFRC522_AntiColl
  1786  048F  0A53               	incf	MFRC522_AntiColl@serNum,w
  1787  0490  0084               	movwf	4
  1788  0491  0849               	movf	??_MFRC522_AntiColl,w
  1789  0492  0080               	movwf	0
  1790                           
  1791                           ;main.c: 455: MFRC522_Clear_Bit( 0x08, 0x08 );
  1792  0493  3008               	movlw	8
  1793  0494  00C9               	movwf	??_MFRC522_AntiColl
  1794  0495  0849               	movf	??_MFRC522_AntiColl,w
  1795  0496  00B3               	movwf	MFRC522_Clear_Bit@mask
  1796  0497  3008               	movlw	8
  1797  0498  223D               	fcall	_MFRC522_Clear_Bit
  1798                           
  1799                           ;main.c: 456: _status = MFRC522_ToCard( 0x0C, serNum, 2, serNum, &unLen );
  1800  0499  1283               	bcf	3,5	;RP0=0, select bank0
  1801  049A  1303               	bcf	3,6	;RP1=0, select bank0
  1802  049B  0853               	movf	MFRC522_AntiColl@serNum,w
  1803  049C  00C9               	movwf	??_MFRC522_AntiColl
  1804  049D  0849               	movf	??_MFRC522_AntiColl,w
  1805  049E  00B7               	movwf	MFRC522_ToCard@sendData
  1806  049F  3002               	movlw	2
  1807  04A0  00CA               	movwf	??_MFRC522_AntiColl+1
  1808  04A1  084A               	movf	??_MFRC522_AntiColl+1,w
  1809  04A2  00B8               	movwf	MFRC522_ToCard@sendLen
  1810  04A3  0853               	movf	MFRC522_AntiColl@serNum,w
  1811  04A4  00CB               	movwf	??_MFRC522_AntiColl+2
  1812  04A5  084B               	movf	??_MFRC522_AntiColl+2,w
  1813  04A6  00B9               	movwf	MFRC522_ToCard@backData
  1814  04A7  304F               	movlw	(low (MFRC522_AntiColl@unLen| 0))& (0+255)
  1815  04A8  00CC               	movwf	??_MFRC522_AntiColl+3
  1816  04A9  084C               	movf	??_MFRC522_AntiColl+3,w
  1817  04AA  00BA               	movwf	MFRC522_ToCard@backLen
  1818  04AB  300C               	movlw	12
  1819  04AC  26C2               	fcall	_MFRC522_ToCard
  1820  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  1821  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  1822  04AF  00CD               	movwf	??_MFRC522_AntiColl+4
  1823  04B0  084D               	movf	??_MFRC522_AntiColl+4,w
  1824  04B1  00D1               	movwf	MFRC522_AntiColl@_status
  1825                           
  1826                           ;main.c: 457: if (_status == 0)
  1827  04B2  0851               	movf	MFRC522_AntiColl@_status,w
  1828  04B3  1D03               	btfss	3,2
  1829  04B4  2CD8               	goto	l198
  1830                           
  1831                           ;main.c: 458: {
  1832                           ;main.c: 459: for ( i=0; i < 4; i++ )
  1833  04B5  01D2               	clrf	MFRC522_AntiColl@i
  1834  04B6  3004               	movlw	4
  1835  04B7  0252               	subwf	MFRC522_AntiColl@i,w
  1836  04B8  1803               	btfsc	3,0
  1837  04B9  2CCC               	goto	l1663
  1838  04BA                     l1657:	
  1839                           
  1840                           ;main.c: 460: {
  1841                           ;main.c: 461: serNumCheck ^= serNum[i];
  1842  04BA  0852               	movf	MFRC522_AntiColl@i,w
  1843  04BB  0753               	addwf	MFRC522_AntiColl@serNum,w
  1844  04BC  00C9               	movwf	??_MFRC522_AntiColl
  1845  04BD  0849               	movf	??_MFRC522_AntiColl,w
  1846  04BE  0084               	movwf	4
  1847  04BF  1383               	bcf	3,7	;select IRP bank0
  1848  04C0  0800               	movf	0,w
  1849  04C1  00CA               	movwf	??_MFRC522_AntiColl+1
  1850  04C2  084A               	movf	??_MFRC522_AntiColl+1,w
  1851  04C3  06CE               	xorwf	MFRC522_AntiColl@serNumCheck,f
  1852  04C4  3001               	movlw	1
  1853  04C5  00C9               	movwf	??_MFRC522_AntiColl
  1854  04C6  0849               	movf	??_MFRC522_AntiColl,w
  1855  04C7  07D2               	addwf	MFRC522_AntiColl@i,f
  1856  04C8  3004               	movlw	4
  1857  04C9  0252               	subwf	MFRC522_AntiColl@i,w
  1858  04CA  1C03               	skipc
  1859  04CB  2CBA               	goto	l1657
  1860  04CC                     l1663:	
  1861                           
  1862                           ;main.c: 462: }
  1863                           ;main.c: 464: if ( serNumCheck != serNum[4] )
  1864  04CC  0853               	movf	MFRC522_AntiColl@serNum,w
  1865  04CD  3E04               	addlw	4
  1866  04CE  0084               	movwf	4
  1867  04CF  1383               	bcf	3,7	;select IRP bank0
  1868  04D0  0800               	movf	0,w
  1869  04D1  064E               	xorwf	MFRC522_AntiColl@serNumCheck,w
  1870  04D2  1903               	skipnz
  1871  04D3  2CD8               	goto	l198
  1872                           
  1873                           ;main.c: 465: {
  1874                           ;main.c: 466: _status = 2;
  1875  04D4  3002               	movlw	2
  1876  04D5  00C9               	movwf	??_MFRC522_AntiColl
  1877  04D6  0849               	movf	??_MFRC522_AntiColl,w
  1878  04D7  00D1               	movwf	MFRC522_AntiColl@_status
  1879  04D8                     l198:	
  1880                           
  1881                           ;main.c: 467: }
  1882                           ;main.c: 468: }
  1883                           ;main.c: 469: return _status;
  1884  04D8  0851               	movf	MFRC522_AntiColl@_status,w
  1885  04D9  0008               	return
  1886  04DA                     __end_of_MFRC522_AntiColl:	
  1887                           
  1888                           	psect	text9
  1889  06C2                     __ptext9:	
  1890 ;; *************** function _MFRC522_ToCard *****************
  1891 ;; Defined at:
  1892 ;;		line 183 in file "main.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;  command         1    wreg     unsigned char 
  1895 ;;  sendData        1   23[BANK0 ] PTR unsigned char 
  1896 ;;		 -> main@UID(6), main@TagType(1), MFRC522_Write@buff(18), MFRC522_Auth@buff(12), 
  1897 ;;		 -> MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  1898 ;;  sendLen         1   24[BANK0 ] unsigned char 
  1899 ;;  backData        1   25[BANK0 ] PTR unsigned char 
  1900 ;;		 -> main@UID(6), main@TagType(1), MFRC522_Write@buff(18), MFRC522_Auth@buff(12), 
  1901 ;;		 -> MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
  1902 ;;  backLen         1   26[BANK0 ] PTR unsigned int 
  1903 ;;		 -> MFRC522_AntiColl@unLen(2), MFRC522_Read@unLen(2), MFRC522_Write@recvBits(2), MFRC522_Auth@recvBits(2), 
  1904 ;;		 -> MFRC522_Halt@unLen(2), MFRC522_SelectTag@recvBits(2), MFRC522_Request@backBits(2), 
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;  command         1   37[BANK0 ] unsigned char 
  1907 ;;  i               2   38[BANK0 ] unsigned int 
  1908 ;;  n               1   40[BANK0 ] unsigned char 
  1909 ;;  irqEn           1   36[BANK0 ] unsigned char 
  1910 ;;  lastBits        1   35[BANK0 ] unsigned char 
  1911 ;;  _status         1   34[BANK0 ] unsigned char 
  1912 ;;  waitIRq         1   33[BANK0 ] unsigned char 
  1913 ;; Return value:  Size  Location     Type
  1914 ;;                  1    wreg      unsigned char 
  1915 ;; Registers used:
  1916 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1917 ;; Tracked objects:
  1918 ;;		On entry : 0/0
  1919 ;;		On exit  : 0/0
  1920 ;;		Unchanged: 0/0
  1921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1922 ;;      Params:         0       4       0       0
  1923 ;;      Locals:         0       8       0       0
  1924 ;;      Temps:          0       6       0       0
  1925 ;;      Totals:         0      18       0       0
  1926 ;;Total ram usage:       18 bytes
  1927 ;; Hardware stack levels used:    1
  1928 ;; Hardware stack levels required when called:    4
  1929 ;; This function calls:
  1930 ;;		_MFRC522_Clear_Bit
  1931 ;;		_MFRC522_Rd
  1932 ;;		_MFRC522_Set_Bit
  1933 ;;		_MFRC522_Wr
  1934 ;; This function is called by:
  1935 ;;		_MFRC522_Request
  1936 ;;		_MFRC522_SelectTag
  1937 ;;		_MFRC522_AntiColl
  1938 ;;		_MFRC522_Halt
  1939 ;;		_MFRC522_Auth
  1940 ;;		_MFRC522_Write
  1941 ;;		_MFRC522_Read
  1942 ;; This function uses a non-reentrant model
  1943 ;;
  1944                           
  1945                           
  1946                           ;psect for function _MFRC522_ToCard
  1947  06C2                     _MFRC522_ToCard:	
  1948                           
  1949                           ;incstack = 0
  1950                           ; Regs used in _MFRC522_ToCard: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1951                           ;MFRC522_ToCard@command stored from wreg
  1952  06C2  1283               	bcf	3,5	;RP0=0, select bank0
  1953  06C3  1303               	bcf	3,6	;RP1=0, select bank0
  1954  06C4  00C5               	movwf	MFRC522_ToCard@command
  1955                           
  1956                           ;main.c: 185: char _status = 2;
  1957  06C5  3002               	movlw	2
  1958  06C6  00BB               	movwf	??_MFRC522_ToCard
  1959  06C7  083B               	movf	??_MFRC522_ToCard,w
  1960  06C8  00C2               	movwf	MFRC522_ToCard@_status
  1961                           
  1962                           ;main.c: 186: char irqEn = 0x00;
  1963  06C9  01C4               	clrf	MFRC522_ToCard@irqEn
  1964                           
  1965                           ;main.c: 187: char waitIRq = 0x00;
  1966  06CA  01C1               	clrf	MFRC522_ToCard@waitIRq
  1967                           
  1968                           ;main.c: 188: char lastBits;
  1969                           ;main.c: 189: char n;
  1970                           ;main.c: 190: unsigned i;
  1971                           ;main.c: 192: switch (command)
  1972  06CB  2EDB               	goto	l1517
  1973  06CC                     l1511:	
  1974                           ;main.c: 193: {
  1975                           ;main.c: 194: case 0x0E:
  1976                           
  1977                           
  1978                           ;main.c: 195: {
  1979                           ;main.c: 196: irqEn = 0x12;
  1980  06CC  3012               	movlw	18
  1981  06CD  00BB               	movwf	??_MFRC522_ToCard
  1982  06CE  083B               	movf	??_MFRC522_ToCard,w
  1983  06CF  00C4               	movwf	MFRC522_ToCard@irqEn
  1984                           
  1985                           ;main.c: 197: waitIRq = 0x10;
  1986  06D0  3010               	movlw	16
  1987  06D1  2ED7               	goto	L1
  1988  06D2                     l1513:	
  1989                           ;main.c: 199: }
  1990                           ;main.c: 200: case 0x0C:
  1991                           
  1992                           ;main.c: 198: break;
  1993                           
  1994                           
  1995                           ;main.c: 201: {
  1996                           ;main.c: 202: irqEn = 0x77;
  1997  06D2  3077               	movlw	119
  1998  06D3  00BB               	movwf	??_MFRC522_ToCard
  1999  06D4  083B               	movf	??_MFRC522_ToCard,w
  2000  06D5  00C4               	movwf	MFRC522_ToCard@irqEn
  2001                           
  2002                           ;main.c: 203: waitIRq = 0x30;
  2003  06D6  3030               	movlw	48
  2004  06D7                     L1:	
  2005  06D7  00BB               	movwf	??_MFRC522_ToCard
  2006  06D8  083B               	movf	??_MFRC522_ToCard,w
  2007  06D9  00C1               	movwf	MFRC522_ToCard@waitIRq
  2008                           
  2009                           ;main.c: 208: }
  2010                           
  2011                           ;main.c: 207: break;
  2012                           
  2013                           ;main.c: 205: }
  2014                           ;main.c: 206: default:
  2015                           
  2016                           ;main.c: 204: break;
  2017  06DA  2EE3               	goto	l1519
  2018  06DB                     l1517:	
  2019  06DB  0845               	movf	MFRC522_ToCard@command,w
  2020                           
  2021                           ; Switch size 1, requested type "space"
  2022                           ; Number of cases is 2, Range of values is 12 to 14
  2023                           ; switch strategies available:
  2024                           ; Name         Instructions Cycles
  2025                           ; simple_byte            7     4 (average)
  2026                           ; direct_byte           12     9 (fixed)
  2027                           ; jumptable            263     9 (fixed)
  2028                           ;	Chosen strategy is simple_byte
  2029  06DC  3A0C               	xorlw	12	; case 12
  2030  06DD  1903               	skipnz
  2031  06DE  2ED2               	goto	l1513
  2032  06DF  3A02               	xorlw	2	; case 14
  2033  06E0  1903               	skipnz
  2034  06E1  2ECC               	goto	l1511
  2035  06E2  2EE3               	goto	l1519
  2036  06E3                     l1519:	
  2037                           
  2038                           ;main.c: 209: MFRC522_Wr( 0x02, irqEn | 0x80 );
  2039  06E3  0844               	movf	MFRC522_ToCard@irqEn,w
  2040  06E4  3880               	iorlw	128
  2041  06E5  00BB               	movwf	??_MFRC522_ToCard
  2042  06E6  083B               	movf	??_MFRC522_ToCard,w
  2043  06E7  00B0               	movwf	MFRC522_Wr@value
  2044  06E8  3002               	movlw	2
  2045  06E9  225D               	fcall	_MFRC522_Wr
  2046                           
  2047                           ;main.c: 210: MFRC522_Clear_Bit( 0x04, 0x80 );
  2048  06EA  3080               	movlw	128
  2049  06EB  1283               	bcf	3,5	;RP0=0, select bank0
  2050  06EC  1303               	bcf	3,6	;RP1=0, select bank0
  2051  06ED  00BB               	movwf	??_MFRC522_ToCard
  2052  06EE  083B               	movf	??_MFRC522_ToCard,w
  2053  06EF  00B3               	movwf	MFRC522_Clear_Bit@mask
  2054  06F0  3004               	movlw	4
  2055  06F1  223D               	fcall	_MFRC522_Clear_Bit
  2056                           
  2057                           ;main.c: 211: MFRC522_Set_Bit( 0x0A, 0x80 );
  2058  06F2  3080               	movlw	128
  2059  06F3  1283               	bcf	3,5	;RP0=0, select bank0
  2060  06F4  1303               	bcf	3,6	;RP1=0, select bank0
  2061  06F5  00BB               	movwf	??_MFRC522_ToCard
  2062  06F6  083B               	movf	??_MFRC522_ToCard,w
  2063  06F7  00B3               	movwf	MFRC522_Set_Bit@mask
  2064  06F8  300A               	movlw	10
  2065  06F9  222F               	fcall	_MFRC522_Set_Bit
  2066                           
  2067                           ;main.c: 212: MFRC522_Wr( 0x01, 0x00 );
  2068  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  2069  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  2070  06FC  01B0               	clrf	MFRC522_Wr@value
  2071  06FD  3001               	movlw	1
  2072  06FE  225D               	fcall	_MFRC522_Wr
  2073                           
  2074                           ;main.c: 217: for ( i=0; i < sendLen; i++ )
  2075  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  2076  0700  1303               	bcf	3,6	;RP1=0, select bank0
  2077  0701  01C6               	clrf	MFRC522_ToCard@i
  2078  0702  01C7               	clrf	MFRC522_ToCard@i+1
  2079  0703                     l1531:	
  2080  0703  0838               	movf	MFRC522_ToCard@sendLen,w
  2081  0704  00BB               	movwf	??_MFRC522_ToCard
  2082  0705  01BC               	clrf	??_MFRC522_ToCard+1
  2083  0706  083C               	movf	??_MFRC522_ToCard+1,w
  2084  0707  0247               	subwf	MFRC522_ToCard@i+1,w
  2085  0708  1D03               	skipz
  2086  0709  2F0C               	goto	u1285
  2087  070A  083B               	movf	??_MFRC522_ToCard,w
  2088  070B  0246               	subwf	MFRC522_ToCard@i,w
  2089  070C                     u1285:	
  2090  070C  1803               	btfsc	3,0
  2091  070D  2F23               	goto	l1533
  2092                           
  2093                           ;main.c: 218: {
  2094                           ;main.c: 219: MFRC522_Wr( 0x09, sendData[i] );
  2095  070E  0846               	movf	MFRC522_ToCard@i,w
  2096  070F  0737               	addwf	MFRC522_ToCard@sendData,w
  2097  0710  00BB               	movwf	??_MFRC522_ToCard
  2098  0711  083B               	movf	??_MFRC522_ToCard,w
  2099  0712  0084               	movwf	4
  2100  0713  1383               	bcf	3,7	;select IRP bank0
  2101  0714  0800               	movf	0,w
  2102  0715  00BC               	movwf	??_MFRC522_ToCard+1
  2103  0716  083C               	movf	??_MFRC522_ToCard+1,w
  2104  0717  00B0               	movwf	MFRC522_Wr@value
  2105  0718  3009               	movlw	9
  2106  0719  225D               	fcall	_MFRC522_Wr
  2107  071A  3001               	movlw	1
  2108  071B  1283               	bcf	3,5	;RP0=0, select bank0
  2109  071C  1303               	bcf	3,6	;RP1=0, select bank0
  2110  071D  07C6               	addwf	MFRC522_ToCard@i,f
  2111  071E  1803               	skipnc
  2112  071F  0AC7               	incf	MFRC522_ToCard@i+1,f
  2113  0720  3000               	movlw	0
  2114  0721  07C7               	addwf	MFRC522_ToCard@i+1,f
  2115  0722  2F03               	goto	l1531
  2116  0723                     l1533:	
  2117                           
  2118                           ;main.c: 220: }
  2119                           ;main.c: 222: MFRC522_Wr( 0x01, command );
  2120  0723  0845               	movf	MFRC522_ToCard@command,w
  2121  0724  00BB               	movwf	??_MFRC522_ToCard
  2122  0725  083B               	movf	??_MFRC522_ToCard,w
  2123  0726  00B0               	movwf	MFRC522_Wr@value
  2124  0727  3001               	movlw	1
  2125  0728  225D               	fcall	_MFRC522_Wr
  2126                           
  2127                           ;main.c: 223: if (command == 0x0C )
  2128  0729  300C               	movlw	12
  2129  072A  1283               	bcf	3,5	;RP0=0, select bank0
  2130  072B  1303               	bcf	3,6	;RP1=0, select bank0
  2131  072C  0645               	xorwf	MFRC522_ToCard@command,w
  2132  072D  1D03               	btfss	3,2
  2133  072E  2F35               	goto	l1539
  2134                           
  2135                           ;main.c: 224: {
  2136                           ;main.c: 225: MFRC522_Set_Bit( 0x0D, 0x80 );
  2137  072F  3080               	movlw	128
  2138  0730  00BB               	movwf	??_MFRC522_ToCard
  2139  0731  083B               	movf	??_MFRC522_ToCard,w
  2140  0732  00B3               	movwf	MFRC522_Set_Bit@mask
  2141  0733  300D               	movlw	13
  2142  0734  222F               	fcall	_MFRC522_Set_Bit
  2143  0735                     l1539:	
  2144                           
  2145                           ;main.c: 226: }
  2146                           ;main.c: 229: i = 0xFFFF;
  2147  0735  30FF               	movlw	255
  2148  0736  1283               	bcf	3,5	;RP0=0, select bank0
  2149  0737  1303               	bcf	3,6	;RP1=0, select bank0
  2150  0738  00C6               	movwf	MFRC522_ToCard@i
  2151  0739  30FF               	movlw	255
  2152  073A  00C7               	movwf	MFRC522_ToCard@i+1
  2153  073B                     l1541:	
  2154                           ;main.c: 230: do
  2155                           
  2156                           
  2157                           ;main.c: 231: {
  2158                           ;main.c: 234: n = MFRC522_Rd( 0x04 );
  2159  073B  3004               	movlw	4
  2160  073C  22AC               	fcall	_MFRC522_Rd
  2161  073D  1283               	bcf	3,5	;RP0=0, select bank0
  2162  073E  1303               	bcf	3,6	;RP1=0, select bank0
  2163  073F  00BB               	movwf	??_MFRC522_ToCard
  2164  0740  083B               	movf	??_MFRC522_ToCard,w
  2165  0741  00C8               	movwf	MFRC522_ToCard@n
  2166                           
  2167                           ;main.c: 235: i--;
  2168  0742  3001               	movlw	1
  2169  0743  02C6               	subwf	MFRC522_ToCard@i,f
  2170  0744  3000               	movlw	0
  2171  0745  1C03               	skipc
  2172  0746  03C7               	decf	MFRC522_ToCard@i+1,f
  2173  0747  02C7               	subwf	MFRC522_ToCard@i+1,f
  2174                           
  2175                           ;main.c: 236: }
  2176                           ;main.c: 237: while ( i && !(n & 0x01) && !( n & waitIRq ) );
  2177  0748  0846               	movf	MFRC522_ToCard@i,w
  2178  0749  0447               	iorwf	MFRC522_ToCard@i+1,w
  2179  074A  1D03               	btfss	3,2
  2180  074B  1848               	btfsc	MFRC522_ToCard@n,0
  2181  074C  2F51               	goto	l1549
  2182  074D  0848               	movf	MFRC522_ToCard@n,w
  2183  074E  0541               	andwf	MFRC522_ToCard@waitIRq,w
  2184  074F  1903               	btfsc	3,2
  2185  0750  2F3B               	goto	l1541
  2186  0751                     l1549:	
  2187                           
  2188                           ;main.c: 238: MFRC522_Clear_Bit( 0x0D, 0x80 );
  2189  0751  3080               	movlw	128
  2190  0752  00BB               	movwf	??_MFRC522_ToCard
  2191  0753  083B               	movf	??_MFRC522_ToCard,w
  2192  0754  00B3               	movwf	MFRC522_Clear_Bit@mask
  2193  0755  300D               	movlw	13
  2194  0756  223D               	fcall	_MFRC522_Clear_Bit
  2195                           
  2196                           ;main.c: 239: if (i != 0)
  2197  0757  1283               	bcf	3,5	;RP0=0, select bank0
  2198  0758  1303               	bcf	3,6	;RP1=0, select bank0
  2199  0759  0846               	movf	MFRC522_ToCard@i,w
  2200  075A  0447               	iorwf	MFRC522_ToCard@i+1,w
  2201  075B  1903               	btfsc	3,2
  2202  075C  2FF5               	goto	l129
  2203                           
  2204                           ;main.c: 240: {
  2205                           ;main.c: 241: if( !( MFRC522_Rd( 0x06 ) & 0x1B ) )
  2206  075D  3006               	movlw	6
  2207  075E  22AC               	fcall	_MFRC522_Rd
  2208  075F  391B               	andlw	27
  2209  0760  1D03               	btfss	3,2
  2210  0761  2FEF               	goto	l1589
  2211                           
  2212                           ;main.c: 242: {
  2213                           ;main.c: 243: _status = 0;
  2214  0762  1283               	bcf	3,5	;RP0=0, select bank0
  2215  0763  1303               	bcf	3,6	;RP1=0, select bank0
  2216  0764  01C2               	clrf	MFRC522_ToCard@_status
  2217                           
  2218                           ;main.c: 244: if ( n & irqEn & 0x01 )
  2219  0765  0844               	movf	MFRC522_ToCard@irqEn,w
  2220  0766  0548               	andwf	MFRC522_ToCard@n,w
  2221  0767  00BB               	movwf	??_MFRC522_ToCard
  2222  0768  1C3B               	btfss	??_MFRC522_ToCard,0
  2223  0769  2F6C               	goto	l1561
  2224                           
  2225                           ;main.c: 245: {
  2226                           ;main.c: 246: _status = 1;
  2227  076A  01C2               	clrf	MFRC522_ToCard@_status
  2228  076B  0AC2               	incf	MFRC522_ToCard@_status,f
  2229  076C                     l1561:	
  2230                           
  2231                           ;main.c: 247: }
  2232                           ;main.c: 248: if ( command == 0x0C )
  2233  076C  300C               	movlw	12
  2234  076D  0645               	xorwf	MFRC522_ToCard@command,w
  2235  076E  1D03               	btfss	3,2
  2236  076F  2FF5               	goto	l129
  2237                           
  2238                           ;main.c: 249: {
  2239                           ;main.c: 250: n = MFRC522_Rd( 0x0A );
  2240  0770  300A               	movlw	10
  2241  0771  22AC               	fcall	_MFRC522_Rd
  2242  0772  1283               	bcf	3,5	;RP0=0, select bank0
  2243  0773  1303               	bcf	3,6	;RP1=0, select bank0
  2244  0774  00BB               	movwf	??_MFRC522_ToCard
  2245  0775  083B               	movf	??_MFRC522_ToCard,w
  2246  0776  00C8               	movwf	MFRC522_ToCard@n
  2247                           
  2248                           ;main.c: 251: lastBits = MFRC522_Rd( 0x0C ) & 0x07;
  2249  0777  300C               	movlw	12
  2250  0778  22AC               	fcall	_MFRC522_Rd
  2251  0779  3907               	andlw	7
  2252  077A  1283               	bcf	3,5	;RP0=0, select bank0
  2253  077B  1303               	bcf	3,6	;RP1=0, select bank0
  2254  077C  00BB               	movwf	??_MFRC522_ToCard
  2255  077D  083B               	movf	??_MFRC522_ToCard,w
  2256  077E  00C3               	movwf	MFRC522_ToCard@lastBits
  2257                           
  2258                           ;main.c: 252: if (lastBits)
  2259  077F  0843               	movf	MFRC522_ToCard@lastBits,w
  2260  0780  1903               	btfsc	3,2
  2261  0781  2FA6               	goto	l1569
  2262                           
  2263                           ;main.c: 253: {
  2264                           ;main.c: 254: *backLen = (n-1) * 8 + lastBits;
  2265  0782  0848               	movf	MFRC522_ToCard@n,w
  2266  0783  00BB               	movwf	??_MFRC522_ToCard
  2267  0784  01BC               	clrf	??_MFRC522_ToCard+1
  2268  0785  1003               	clrc
  2269  0786  0DBB               	rlf	??_MFRC522_ToCard,f
  2270  0787  0DBC               	rlf	??_MFRC522_ToCard+1,f
  2271  0788  1003               	clrc
  2272  0789  0DBB               	rlf	??_MFRC522_ToCard,f
  2273  078A  0DBC               	rlf	??_MFRC522_ToCard+1,f
  2274  078B  1003               	clrc
  2275  078C  0DBB               	rlf	??_MFRC522_ToCard,f
  2276  078D  0DBC               	rlf	??_MFRC522_ToCard+1,f
  2277  078E  0843               	movf	MFRC522_ToCard@lastBits,w
  2278  078F  073B               	addwf	??_MFRC522_ToCard,w
  2279  0790  00BD               	movwf	??_MFRC522_ToCard+2
  2280  0791  3000               	movlw	0
  2281  0792  1803               	skipnc
  2282  0793  3001               	movlw	1
  2283  0794  073C               	addwf	??_MFRC522_ToCard+1,w
  2284  0795  00BE               	movwf	??_MFRC522_ToCard+3
  2285  0796  083D               	movf	??_MFRC522_ToCard+2,w
  2286  0797  3EF8               	addlw	248
  2287  0798  00BF               	movwf	??_MFRC522_ToCard+4
  2288  0799  083E               	movf	??_MFRC522_ToCard+3,w
  2289  079A  1803               	skipnc
  2290  079B  3E01               	addlw	1
  2291  079C  3EFF               	addlw	255
  2292  079D  00C0               	movwf	??_MFRC522_ToCard+5
  2293  079E  083A               	movf	MFRC522_ToCard@backLen,w
  2294  079F  0084               	movwf	4
  2295  07A0  083F               	movf	??_MFRC522_ToCard+4,w
  2296  07A1  1383               	bcf	3,7	;select IRP bank0
  2297  07A2  0080               	movwf	0
  2298  07A3  0A84               	incf	4,f
  2299  07A4  0840               	movf	??_MFRC522_ToCard+5,w
  2300  07A5  2FB9               	goto	L2
  2301  07A6                     l1569:	
  2302                           ;main.c: 255: }
  2303                           
  2304                           
  2305                           ;main.c: 256: else
  2306                           ;main.c: 257: {
  2307                           ;main.c: 258: *backLen = n * 8;
  2308  07A6  0848               	movf	MFRC522_ToCard@n,w
  2309  07A7  00BB               	movwf	??_MFRC522_ToCard
  2310  07A8  01BC               	clrf	??_MFRC522_ToCard+1
  2311  07A9  1003               	clrc
  2312  07AA  0DBB               	rlf	??_MFRC522_ToCard,f
  2313  07AB  0DBC               	rlf	??_MFRC522_ToCard+1,f
  2314  07AC  1003               	clrc
  2315  07AD  0DBB               	rlf	??_MFRC522_ToCard,f
  2316  07AE  0DBC               	rlf	??_MFRC522_ToCard+1,f
  2317  07AF  1003               	clrc
  2318  07B0  0DBB               	rlf	??_MFRC522_ToCard,f
  2319  07B1  0DBC               	rlf	??_MFRC522_ToCard+1,f
  2320  07B2  083A               	movf	MFRC522_ToCard@backLen,w
  2321  07B3  0084               	movwf	4
  2322  07B4  083B               	movf	??_MFRC522_ToCard,w
  2323  07B5  1383               	bcf	3,7	;select IRP bank0
  2324  07B6  0080               	movwf	0
  2325  07B7  0A84               	incf	4,f
  2326  07B8  083C               	movf	??_MFRC522_ToCard+1,w
  2327  07B9                     L2:	
  2328  07B9  0080               	movwf	0
  2329                           
  2330                           ;main.c: 259: }
  2331                           ;main.c: 260: if (n == 0)
  2332  07BA  0848               	movf	MFRC522_ToCard@n,w
  2333  07BB  1D03               	btfss	3,2
  2334  07BC  2FBF               	goto	l1575
  2335                           
  2336                           ;main.c: 261: {
  2337                           ;main.c: 262: n = 1;
  2338  07BD  01C8               	clrf	MFRC522_ToCard@n
  2339  07BE  0AC8               	incf	MFRC522_ToCard@n,f
  2340  07BF                     l1575:	
  2341                           
  2342                           ;main.c: 263: }
  2343                           ;main.c: 264: if (n > 16)
  2344  07BF  3011               	movlw	17
  2345  07C0  0248               	subwf	MFRC522_ToCard@n,w
  2346  07C1  1C03               	skipc
  2347  07C2  2FC7               	goto	l1579
  2348                           
  2349                           ;main.c: 265: {
  2350                           ;main.c: 266: n = 16;
  2351  07C3  3010               	movlw	16
  2352  07C4  00BB               	movwf	??_MFRC522_ToCard
  2353  07C5  083B               	movf	??_MFRC522_ToCard,w
  2354  07C6  00C8               	movwf	MFRC522_ToCard@n
  2355  07C7                     l1579:	
  2356                           
  2357                           ;main.c: 267: }
  2358                           ;main.c: 269: for (i=0; i < n; i++)
  2359  07C7  01C6               	clrf	MFRC522_ToCard@i
  2360  07C8  01C7               	clrf	MFRC522_ToCard@i+1
  2361  07C9                     l1585:	
  2362  07C9  0848               	movf	MFRC522_ToCard@n,w
  2363  07CA  00BB               	movwf	??_MFRC522_ToCard
  2364  07CB  01BC               	clrf	??_MFRC522_ToCard+1
  2365  07CC  083C               	movf	??_MFRC522_ToCard+1,w
  2366  07CD  0247               	subwf	MFRC522_ToCard@i+1,w
  2367  07CE  1D03               	skipz
  2368  07CF  2FD2               	goto	u1405
  2369  07D0  083B               	movf	??_MFRC522_ToCard,w
  2370  07D1  0246               	subwf	MFRC522_ToCard@i,w
  2371  07D2                     u1405:	
  2372  07D2  1803               	btfsc	3,0
  2373  07D3  2FE8               	goto	l1587
  2374                           
  2375                           ;main.c: 270: {
  2376                           ;main.c: 271: backData[i] = MFRC522_Rd( 0x09 );
  2377  07D4  3009               	movlw	9
  2378  07D5  22AC               	fcall	_MFRC522_Rd
  2379  07D6  1283               	bcf	3,5	;RP0=0, select bank0
  2380  07D7  1303               	bcf	3,6	;RP1=0, select bank0
  2381  07D8  00BB               	movwf	??_MFRC522_ToCard
  2382  07D9  0846               	movf	MFRC522_ToCard@i,w
  2383  07DA  0739               	addwf	MFRC522_ToCard@backData,w
  2384  07DB  00BC               	movwf	??_MFRC522_ToCard+1
  2385  07DC  083C               	movf	??_MFRC522_ToCard+1,w
  2386  07DD  0084               	movwf	4
  2387  07DE  083B               	movf	??_MFRC522_ToCard,w
  2388  07DF  1383               	bcf	3,7	;select IRP bank0
  2389  07E0  0080               	movwf	0
  2390  07E1  3001               	movlw	1
  2391  07E2  07C6               	addwf	MFRC522_ToCard@i,f
  2392  07E3  1803               	skipnc
  2393  07E4  0AC7               	incf	MFRC522_ToCard@i+1,f
  2394  07E5  3000               	movlw	0
  2395  07E6  07C7               	addwf	MFRC522_ToCard@i+1,f
  2396  07E7  2FC9               	goto	l1585
  2397  07E8                     l1587:	
  2398                           
  2399                           ;main.c: 272: }
  2400                           ;main.c: 274: backData[i] = 0;
  2401  07E8  0846               	movf	MFRC522_ToCard@i,w
  2402  07E9  0739               	addwf	MFRC522_ToCard@backData,w
  2403  07EA  00BB               	movwf	??_MFRC522_ToCard
  2404  07EB  083B               	movf	??_MFRC522_ToCard,w
  2405  07EC  0084               	movwf	4
  2406  07ED  0180               	clrf	0
  2407                           
  2408                           ;main.c: 275: }
  2409                           ;main.c: 276: }
  2410  07EE  2FF5               	goto	l129
  2411  07EF                     l1589:	
  2412                           
  2413                           ;main.c: 277: else
  2414                           ;main.c: 278: {
  2415                           ;main.c: 279: _status = 2;
  2416  07EF  3002               	movlw	2
  2417  07F0  1283               	bcf	3,5	;RP0=0, select bank0
  2418  07F1  1303               	bcf	3,6	;RP1=0, select bank0
  2419  07F2  00BB               	movwf	??_MFRC522_ToCard
  2420  07F3  083B               	movf	??_MFRC522_ToCard,w
  2421  07F4  00C2               	movwf	MFRC522_ToCard@_status
  2422  07F5                     l129:	
  2423                           
  2424                           ;main.c: 280: }
  2425                           ;main.c: 281: }
  2426                           ;main.c: 284: return _status;
  2427  07F5  0842               	movf	MFRC522_ToCard@_status,w
  2428  07F6  0008               	return
  2429  07F7                     __end_of_MFRC522_ToCard:	
  2430                           
  2431                           	psect	text10
  2432  023D                     __ptext10:	
  2433 ;; *************** function _MFRC522_Clear_Bit *****************
  2434 ;; Defined at:
  2435 ;;		line 141 in file "main.c"
  2436 ;; Parameters:    Size  Location     Type
  2437 ;;  addr            1    wreg     unsigned char 
  2438 ;;  mask            1   19[BANK0 ] unsigned char 
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;  addr            1   22[BANK0 ] unsigned char 
  2441 ;; Return value:  Size  Location     Type
  2442 ;;		None               void
  2443 ;; Registers used:
  2444 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2450 ;;      Params:         0       1       0       0
  2451 ;;      Locals:         0       1       0       0
  2452 ;;      Temps:          0       2       0       0
  2453 ;;      Totals:         0       4       0       0
  2454 ;;Total ram usage:        4 bytes
  2455 ;; Hardware stack levels used:    1
  2456 ;; Hardware stack levels required when called:    3
  2457 ;; This function calls:
  2458 ;;		_MFRC522_Rd
  2459 ;;		_MFRC522_Wr
  2460 ;; This function is called by:
  2461 ;;		_MFRC522_ToCard
  2462 ;;		_MFRC522_CRC
  2463 ;;		_MFRC522_AntiColl
  2464 ;;		_MFRC522_AntennaOff
  2465 ;;		_MFRC522_Halt
  2466 ;; This function uses a non-reentrant model
  2467 ;;
  2468                           
  2469                           
  2470                           ;psect for function _MFRC522_Clear_Bit
  2471  023D                     _MFRC522_Clear_Bit:	
  2472                           
  2473                           ;incstack = 0
  2474                           ; Regs used in _MFRC522_Clear_Bit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2475                           ;MFRC522_Clear_Bit@addr stored from wreg
  2476  023D  1283               	bcf	3,5	;RP0=0, select bank0
  2477  023E  1303               	bcf	3,6	;RP1=0, select bank0
  2478  023F  00B6               	movwf	MFRC522_Clear_Bit@addr
  2479                           
  2480                           ;main.c: 143: MFRC522_Wr( addr, MFRC522_Rd( addr ) & (~mask) );
  2481  0240  0933               	comf	MFRC522_Clear_Bit@mask,w
  2482  0241  00B4               	movwf	??_MFRC522_Clear_Bit
  2483  0242  0836               	movf	MFRC522_Clear_Bit@addr,w
  2484  0243  22AC               	fcall	_MFRC522_Rd
  2485  0244  1283               	bcf	3,5	;RP0=0, select bank0
  2486  0245  1303               	bcf	3,6	;RP1=0, select bank0
  2487  0246  0534               	andwf	??_MFRC522_Clear_Bit,w
  2488  0247  00B5               	movwf	??_MFRC522_Clear_Bit+1
  2489  0248  0835               	movf	??_MFRC522_Clear_Bit+1,w
  2490  0249  00B0               	movwf	MFRC522_Wr@value
  2491  024A  0836               	movf	MFRC522_Clear_Bit@addr,w
  2492  024B  225D               	fcall	_MFRC522_Wr
  2493  024C  0008               	return
  2494  024D                     __end_of_MFRC522_Clear_Bit:	
  2495                           
  2496                           	psect	text11
  2497  0352                     __ptext11:	
  2498 ;; *************** function _MFRC522_Init *****************
  2499 ;; Defined at:
  2500 ;;		line 161 in file "main.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;		None
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;		None
  2505 ;; Return value:  Size  Location     Type
  2506 ;;		None               void
  2507 ;; Registers used:
  2508 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2514 ;;      Params:         0       0       0       0
  2515 ;;      Locals:         0       0       0       0
  2516 ;;      Temps:          0       1       0       0
  2517 ;;      Totals:         0       1       0       0
  2518 ;;Total ram usage:        1 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    5
  2521 ;; This function calls:
  2522 ;;		_MFRC522_AntennaOn
  2523 ;;		_MFRC522_Reset
  2524 ;;		_MFRC522_Wr
  2525 ;; This function is called by:
  2526 ;;		_main
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           
  2531                           ;psect for function _MFRC522_Init
  2532  0352                     _MFRC522_Init:	
  2533                           
  2534                           ;main.c: 163: TRISAbits.TRISA1 = 0;
  2535                           
  2536                           ;incstack = 0
  2537                           ; Regs used in _MFRC522_Init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2538  0352  1683               	bsf	3,5	;RP0=1, select bank1
  2539  0353  1303               	bcf	3,6	;RP1=0, select bank1
  2540  0354  1085               	bcf	5,1	;volatile
  2541                           
  2542                           ;main.c: 164: TRISAbits.TRISA0 = 0;
  2543  0355  1005               	bcf	5,0	;volatile
  2544                           
  2545                           ;main.c: 165: PORTAbits.RA1 = 1;
  2546  0356  1283               	bcf	3,5	;RP0=0, select bank0
  2547  0357  1303               	bcf	3,6	;RP1=0, select bank0
  2548  0358  1485               	bsf	5,1	;volatile
  2549                           
  2550                           ;main.c: 166: PORTAbits.RA0 = 1;
  2551  0359  1405               	bsf	5,0	;volatile
  2552                           
  2553                           ;main.c: 168: MFRC522_Reset();
  2554  035A  2226               	fcall	_MFRC522_Reset
  2555                           
  2556                           ;main.c: 170: MFRC522_Wr( 0x2A, 0x8D );
  2557  035B  308D               	movlw	141
  2558  035C  1283               	bcf	3,5	;RP0=0, select bank0
  2559  035D  1303               	bcf	3,6	;RP1=0, select bank0
  2560  035E  00B7               	movwf	??_MFRC522_Init
  2561  035F  0837               	movf	??_MFRC522_Init,w
  2562  0360  00B0               	movwf	MFRC522_Wr@value
  2563  0361  302A               	movlw	42
  2564  0362  225D               	fcall	_MFRC522_Wr
  2565                           
  2566                           ;main.c: 171: MFRC522_Wr( 0x2B, 0x3E );
  2567  0363  303E               	movlw	62
  2568  0364  1283               	bcf	3,5	;RP0=0, select bank0
  2569  0365  1303               	bcf	3,6	;RP1=0, select bank0
  2570  0366  00B7               	movwf	??_MFRC522_Init
  2571  0367  0837               	movf	??_MFRC522_Init,w
  2572  0368  00B0               	movwf	MFRC522_Wr@value
  2573  0369  302B               	movlw	43
  2574  036A  225D               	fcall	_MFRC522_Wr
  2575                           
  2576                           ;main.c: 172: MFRC522_Wr( 0x2D, 30 );
  2577  036B  301E               	movlw	30
  2578  036C  1283               	bcf	3,5	;RP0=0, select bank0
  2579  036D  1303               	bcf	3,6	;RP1=0, select bank0
  2580  036E  00B7               	movwf	??_MFRC522_Init
  2581  036F  0837               	movf	??_MFRC522_Init,w
  2582  0370  00B0               	movwf	MFRC522_Wr@value
  2583  0371  302D               	movlw	45
  2584  0372  225D               	fcall	_MFRC522_Wr
  2585                           
  2586                           ;main.c: 173: MFRC522_Wr( 0x2C, 0 );
  2587  0373  1283               	bcf	3,5	;RP0=0, select bank0
  2588  0374  1303               	bcf	3,6	;RP1=0, select bank0
  2589  0375  01B0               	clrf	MFRC522_Wr@value
  2590  0376  302C               	movlw	44
  2591  0377  225D               	fcall	_MFRC522_Wr
  2592                           
  2593                           ;main.c: 175: MFRC522_Wr( 0x15, 0x40 );
  2594  0378  3040               	movlw	64
  2595  0379  1283               	bcf	3,5	;RP0=0, select bank0
  2596  037A  1303               	bcf	3,6	;RP1=0, select bank0
  2597  037B  00B7               	movwf	??_MFRC522_Init
  2598  037C  0837               	movf	??_MFRC522_Init,w
  2599  037D  00B0               	movwf	MFRC522_Wr@value
  2600  037E  3015               	movlw	21
  2601  037F  225D               	fcall	_MFRC522_Wr
  2602                           
  2603                           ;main.c: 176: MFRC522_Wr( 0x11, 0x3D );
  2604  0380  303D               	movlw	61
  2605  0381  1283               	bcf	3,5	;RP0=0, select bank0
  2606  0382  1303               	bcf	3,6	;RP1=0, select bank0
  2607  0383  00B7               	movwf	??_MFRC522_Init
  2608  0384  0837               	movf	??_MFRC522_Init,w
  2609  0385  00B0               	movwf	MFRC522_Wr@value
  2610  0386  3011               	movlw	17
  2611  0387  225D               	fcall	_MFRC522_Wr
  2612                           
  2613                           ;main.c: 181: MFRC522_AntennaOn();
  2614  0388  221D               	fcall	_MFRC522_AntennaOn
  2615  0389  0008               	return
  2616  038A                     __end_of_MFRC522_Init:	
  2617                           
  2618                           	psect	text12
  2619  0226                     __ptext12:	
  2620 ;; *************** function _MFRC522_Reset *****************
  2621 ;; Defined at:
  2622 ;;		line 149 in file "main.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;		None
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;		None
  2627 ;; Return value:  Size  Location     Type
  2628 ;;		None               void
  2629 ;; Registers used:
  2630 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2636 ;;      Params:         0       0       0       0
  2637 ;;      Locals:         0       0       0       0
  2638 ;;      Temps:          0       1       0       0
  2639 ;;      Totals:         0       1       0       0
  2640 ;;Total ram usage:        1 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    2
  2643 ;; This function calls:
  2644 ;;		_MFRC522_Wr
  2645 ;; This function is called by:
  2646 ;;		_MFRC522_Init
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           
  2651                           ;psect for function _MFRC522_Reset
  2652  0226                     _MFRC522_Reset:	
  2653                           
  2654                           ;main.c: 151: MFRC522_Wr( 0x01, 0x0F );
  2655                           
  2656                           ;incstack = 0
  2657                           ; Regs used in _MFRC522_Reset: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2658  0226  300F               	movlw	15
  2659  0227  1283               	bcf	3,5	;RP0=0, select bank0
  2660  0228  1303               	bcf	3,6	;RP1=0, select bank0
  2661  0229  00B3               	movwf	??_MFRC522_Reset
  2662  022A  0833               	movf	??_MFRC522_Reset,w
  2663  022B  00B0               	movwf	MFRC522_Wr@value
  2664  022C  3001               	movlw	1
  2665  022D  225D               	fcall	_MFRC522_Wr
  2666  022E  0008               	return
  2667  022F                     __end_of_MFRC522_Reset:	
  2668                           
  2669                           	psect	text13
  2670  021D                     __ptext13:	
  2671 ;; *************** function _MFRC522_AntennaOn *****************
  2672 ;; Defined at:
  2673 ;;		line 153 in file "main.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;		None
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;		None
  2678 ;; Return value:  Size  Location     Type
  2679 ;;		None               void
  2680 ;; Registers used:
  2681 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2682 ;; Tracked objects:
  2683 ;;		On entry : 0/0
  2684 ;;		On exit  : 0/0
  2685 ;;		Unchanged: 0/0
  2686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2687 ;;      Params:         0       0       0       0
  2688 ;;      Locals:         0       0       0       0
  2689 ;;      Temps:          0       1       0       0
  2690 ;;      Totals:         0       1       0       0
  2691 ;;Total ram usage:        1 bytes
  2692 ;; Hardware stack levels used:    1
  2693 ;; Hardware stack levels required when called:    4
  2694 ;; This function calls:
  2695 ;;		_MFRC522_Set_Bit
  2696 ;; This function is called by:
  2697 ;;		_MFRC522_Init
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           
  2702                           ;psect for function _MFRC522_AntennaOn
  2703  021D                     _MFRC522_AntennaOn:	
  2704                           
  2705                           ;main.c: 155: MFRC522_Set_Bit( 0x14, 0x03 );
  2706                           
  2707                           ;incstack = 0
  2708                           ; Regs used in _MFRC522_AntennaOn: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2709  021D  3003               	movlw	3
  2710  021E  1283               	bcf	3,5	;RP0=0, select bank0
  2711  021F  1303               	bcf	3,6	;RP1=0, select bank0
  2712  0220  00B6               	movwf	??_MFRC522_AntennaOn
  2713  0221  0836               	movf	??_MFRC522_AntennaOn,w
  2714  0222  00B3               	movwf	MFRC522_Set_Bit@mask
  2715  0223  3014               	movlw	20
  2716  0224  222F               	fcall	_MFRC522_Set_Bit
  2717  0225  0008               	return
  2718  0226                     __end_of_MFRC522_AntennaOn:	
  2719                           
  2720                           	psect	text14
  2721  022F                     __ptext14:	
  2722 ;; *************** function _MFRC522_Set_Bit *****************
  2723 ;; Defined at:
  2724 ;;		line 145 in file "main.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;  addr            1    wreg     unsigned char 
  2727 ;;  mask            1   19[BANK0 ] unsigned char 
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;  addr            1   21[BANK0 ] unsigned char 
  2730 ;; Return value:  Size  Location     Type
  2731 ;;		None               void
  2732 ;; Registers used:
  2733 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2734 ;; Tracked objects:
  2735 ;;		On entry : 0/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2739 ;;      Params:         0       1       0       0
  2740 ;;      Locals:         0       1       0       0
  2741 ;;      Temps:          0       1       0       0
  2742 ;;      Totals:         0       3       0       0
  2743 ;;Total ram usage:        3 bytes
  2744 ;; Hardware stack levels used:    1
  2745 ;; Hardware stack levels required when called:    3
  2746 ;; This function calls:
  2747 ;;		_MFRC522_Rd
  2748 ;;		_MFRC522_Wr
  2749 ;; This function is called by:
  2750 ;;		_MFRC522_AntennaOn
  2751 ;;		_MFRC522_ToCard
  2752 ;;		_MFRC522_CRC
  2753 ;; This function uses a non-reentrant model
  2754 ;;
  2755                           
  2756                           
  2757                           ;psect for function _MFRC522_Set_Bit
  2758  022F                     _MFRC522_Set_Bit:	
  2759                           
  2760                           ;incstack = 0
  2761                           ; Regs used in _MFRC522_Set_Bit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2762                           ;MFRC522_Set_Bit@addr stored from wreg
  2763  022F  1283               	bcf	3,5	;RP0=0, select bank0
  2764  0230  1303               	bcf	3,6	;RP1=0, select bank0
  2765  0231  00B5               	movwf	MFRC522_Set_Bit@addr
  2766                           
  2767                           ;main.c: 147: MFRC522_Wr( addr, MFRC522_Rd( addr ) | mask );
  2768  0232  0835               	movf	MFRC522_Set_Bit@addr,w
  2769  0233  22AC               	fcall	_MFRC522_Rd
  2770  0234  1283               	bcf	3,5	;RP0=0, select bank0
  2771  0235  1303               	bcf	3,6	;RP1=0, select bank0
  2772  0236  0433               	iorwf	MFRC522_Set_Bit@mask,w
  2773  0237  00B4               	movwf	??_MFRC522_Set_Bit
  2774  0238  0834               	movf	??_MFRC522_Set_Bit,w
  2775  0239  00B0               	movwf	MFRC522_Wr@value
  2776  023A  0835               	movf	MFRC522_Set_Bit@addr,w
  2777  023B  225D               	fcall	_MFRC522_Wr
  2778  023C  0008               	return
  2779  023D                     __end_of_MFRC522_Set_Bit:	
  2780                           
  2781                           	psect	text15
  2782  025D                     __ptext15:	
  2783 ;; *************** function _MFRC522_Wr *****************
  2784 ;; Defined at:
  2785 ;;		line 124 in file "main.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;  addr            1    wreg     unsigned char 
  2788 ;;  value           1   16[BANK0 ] unsigned char 
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;  addr            1   18[BANK0 ] unsigned char 
  2791 ;; Return value:  Size  Location     Type
  2792 ;;		None               void
  2793 ;; Registers used:
  2794 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2795 ;; Tracked objects:
  2796 ;;		On entry : 0/0
  2797 ;;		On exit  : 0/0
  2798 ;;		Unchanged: 0/0
  2799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2800 ;;      Params:         0       1       0       0
  2801 ;;      Locals:         0       1       0       0
  2802 ;;      Temps:          0       1       0       0
  2803 ;;      Totals:         0       3       0       0
  2804 ;;Total ram usage:        3 bytes
  2805 ;; Hardware stack levels used:    1
  2806 ;; Hardware stack levels required when called:    1
  2807 ;; This function calls:
  2808 ;;		_SPI_transfer
  2809 ;; This function is called by:
  2810 ;;		_MFRC522_Clear_Bit
  2811 ;;		_MFRC522_Set_Bit
  2812 ;;		_MFRC522_Reset
  2813 ;;		_MFRC522_Init
  2814 ;;		_MFRC522_ToCard
  2815 ;;		_MFRC522_Request
  2816 ;;		_MFRC522_CRC
  2817 ;;		_MFRC522_AntiColl
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           
  2822                           ;psect for function _MFRC522_Wr
  2823  025D                     _MFRC522_Wr:	
  2824                           
  2825                           ;incstack = 0
  2826                           ; Regs used in _MFRC522_Wr: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2827                           ;MFRC522_Wr@addr stored from wreg
  2828  025D  1283               	bcf	3,5	;RP0=0, select bank0
  2829  025E  1303               	bcf	3,6	;RP1=0, select bank0
  2830  025F  00B2               	movwf	MFRC522_Wr@addr
  2831                           
  2832                           ;main.c: 126: PORTAbits.RA1 = 0;
  2833  0260  1085               	bcf	5,1	;volatile
  2834                           
  2835                           ;main.c: 127: SPI_transfer( ( addr << 1 ) & 0x7E );
  2836  0261  0832               	movf	MFRC522_Wr@addr,w
  2837  0262  00B1               	movwf	??_MFRC522_Wr
  2838  0263  0731               	addwf	??_MFRC522_Wr,w
  2839  0264  397E               	andlw	126
  2840  0265  24DA               	fcall	_SPI_transfer
  2841                           
  2842                           ;main.c: 128: SPI_transfer( value );
  2843  0266  1283               	bcf	3,5	;RP0=0, select bank0
  2844  0267  1303               	bcf	3,6	;RP1=0, select bank0
  2845  0268  0830               	movf	MFRC522_Wr@value,w
  2846  0269  24DA               	fcall	_SPI_transfer
  2847                           
  2848                           ;main.c: 129: PORTAbits.RA1 = 1;
  2849  026A  1283               	bcf	3,5	;RP0=0, select bank0
  2850  026B  1303               	bcf	3,6	;RP1=0, select bank0
  2851  026C  1485               	bsf	5,1	;volatile
  2852  026D  0008               	return
  2853  026E                     __end_of_MFRC522_Wr:	
  2854                           
  2855                           	psect	text16
  2856  02AC                     __ptext16:	
  2857 ;; *************** function _MFRC522_Rd *****************
  2858 ;; Defined at:
  2859 ;;		line 131 in file "main.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;  addr            1    wreg     unsigned char 
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;  addr            1   14[BANK0 ] unsigned char 
  2864 ;;  value           1   15[BANK0 ] unsigned char 
  2865 ;; Return value:  Size  Location     Type
  2866 ;;                  1    wreg      unsigned char 
  2867 ;; Registers used:
  2868 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2869 ;; Tracked objects:
  2870 ;;		On entry : 0/0
  2871 ;;		On exit  : 0/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2874 ;;      Params:         0       0       0       0
  2875 ;;      Locals:         0       2       0       0
  2876 ;;      Temps:          0       2       0       0
  2877 ;;      Totals:         0       4       0       0
  2878 ;;Total ram usage:        4 bytes
  2879 ;; Hardware stack levels used:    1
  2880 ;; Hardware stack levels required when called:    2
  2881 ;; This function calls:
  2882 ;;		_SPI_transfer
  2883 ;;		_printf
  2884 ;; This function is called by:
  2885 ;;		_MFRC522_Clear_Bit
  2886 ;;		_MFRC522_Set_Bit
  2887 ;;		_MFRC522_ToCard
  2888 ;;		_MFRC522_CRC
  2889 ;;		_MFRC522_Auth
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893                           
  2894                           ;psect for function _MFRC522_Rd
  2895  02AC                     _MFRC522_Rd:	
  2896                           
  2897                           ;incstack = 0
  2898                           ; Regs used in _MFRC522_Rd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2899                           ;MFRC522_Rd@addr stored from wreg
  2900  02AC  1283               	bcf	3,5	;RP0=0, select bank0
  2901  02AD  1303               	bcf	3,6	;RP1=0, select bank0
  2902  02AE  00AE               	movwf	MFRC522_Rd@addr
  2903                           
  2904                           ;main.c: 133: char value;
  2905                           ;main.c: 134: PORTAbits.RA1 = 0;
  2906  02AF  1085               	bcf	5,1	;volatile
  2907                           
  2908                           ;main.c: 135: SPI_transfer( (( addr << 1 ) & 0x7E) | 0x80 );
  2909  02B0  082E               	movf	MFRC522_Rd@addr,w
  2910  02B1  00AC               	movwf	??_MFRC522_Rd
  2911  02B2  072C               	addwf	??_MFRC522_Rd,w
  2912  02B3  397E               	andlw	126
  2913  02B4  3880               	iorlw	128
  2914  02B5  24DA               	fcall	_SPI_transfer
  2915                           
  2916                           ;main.c: 136: value = SPI_transfer( 0x00 );
  2917  02B6  3000               	movlw	0
  2918  02B7  24DA               	fcall	_SPI_transfer
  2919  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  2920  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  2921  02BA  00AC               	movwf	??_MFRC522_Rd
  2922  02BB  082C               	movf	??_MFRC522_Rd,w
  2923  02BC  00AF               	movwf	MFRC522_Rd@value
  2924                           
  2925                           ;main.c: 137: PORTAbits.RA1 = 1;
  2926  02BD  1485               	bsf	5,1	;volatile
  2927                           
  2928                           ;main.c: 138: printf("%d    ",(int)value);
  2929  02BE  082F               	movf	MFRC522_Rd@value,w
  2930  02BF  00AC               	movwf	??_MFRC522_Rd
  2931  02C0  01AD               	clrf	??_MFRC522_Rd+1
  2932  02C1  082C               	movf	??_MFRC522_Rd,w
  2933  02C2  00A0               	movwf	?_printf
  2934  02C3  082D               	movf	??_MFRC522_Rd+1,w
  2935  02C4  00A1               	movwf	?_printf+1
  2936  02C5  302F               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2937  02C6  255E               	fcall	_printf
  2938                           
  2939                           ;main.c: 139: return value;
  2940  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  2941  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  2942  02C9  082F               	movf	MFRC522_Rd@value,w
  2943  02CA  0008               	return
  2944  02CB                     __end_of_MFRC522_Rd:	
  2945                           
  2946                           	psect	text17
  2947  055E                     __ptext17:	
  2948 ;; *************** function _printf *****************
  2949 ;; Defined at:
  2950 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;  f               1    wreg     PTR const unsigned char 
  2953 ;;		 -> STR_8(2), STR_7(2), STR_6(3), STR_5(9), 
  2954 ;;		 -> STR_4(16), STR_3(2), STR_2(11), STR_1(7), 
  2955 ;; Auto vars:     Size  Location     Type
  2956 ;;  f               1   10[BANK0 ] PTR const unsigned char 
  2957 ;;		 -> STR_8(2), STR_7(2), STR_6(3), STR_5(9), 
  2958 ;;		 -> STR_4(16), STR_3(2), STR_2(11), STR_1(7), 
  2959 ;;  tmpval          4    0        struct .
  2960 ;;  val             2    8[BANK0 ] unsigned int 
  2961 ;;  cp              2    0        PTR const unsigned char 
  2962 ;;  len             2    0        unsigned int 
  2963 ;;  c               1   11[BANK0 ] char 
  2964 ;;  flag            1    7[BANK0 ] unsigned char 
  2965 ;;  ap              1    6[BANK0 ] PTR void [1]
  2966 ;;		 -> ?_printf(2), 
  2967 ;;  prec            1    5[BANK0 ] char 
  2968 ;; Return value:  Size  Location     Type
  2969 ;;                  2    0[BANK0 ] int 
  2970 ;; Registers used:
  2971 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2972 ;; Tracked objects:
  2973 ;;		On entry : 0/0
  2974 ;;		On exit  : 0/0
  2975 ;;		Unchanged: 0/0
  2976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2977 ;;      Params:         0       2       0       0
  2978 ;;      Locals:         0       7       0       0
  2979 ;;      Temps:          0       3       0       0
  2980 ;;      Totals:         0      12       0       0
  2981 ;;Total ram usage:       12 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; Hardware stack levels required when called:    1
  2984 ;; This function calls:
  2985 ;;		___lwdiv
  2986 ;;		___lwmod
  2987 ;;		_putch
  2988 ;; This function is called by:
  2989 ;;		_MFRC522_Rd
  2990 ;;		_main
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           
  2995                           ;psect for function _printf
  2996  055E                     _printf:	
  2997                           
  2998                           ;incstack = 0
  2999                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3000                           ;printf@f stored from wreg
  3001  055E  1283               	bcf	3,5	;RP0=0, select bank0
  3002  055F  1303               	bcf	3,6	;RP1=0, select bank0
  3003  0560  00AA               	movwf	printf@f
  3004                           
  3005                           ;doprnt.c: 466: va_list ap;
  3006                           ;doprnt.c: 499: signed char c;
  3007                           ;doprnt.c: 506: signed char prec;
  3008                           ;doprnt.c: 508: unsigned char flag;
  3009                           ;doprnt.c: 523: union {
  3010                           ;doprnt.c: 524: unsigned long vd;
  3011                           ;doprnt.c: 525: double integ;
  3012                           ;doprnt.c: 526: } tmpval;
  3013                           ;doprnt.c: 528: unsigned int val;
  3014                           ;doprnt.c: 529: unsigned len;
  3015                           ;doprnt.c: 530: const char * cp;
  3016                           ;doprnt.c: 533: *ap = __va_start();
  3017  0561  3020               	movlw	(low (?_printf| 0))& (0+255)
  3018  0562  00A2               	movwf	??_printf
  3019  0563  0822               	movf	??_printf,w
  3020  0564  00A6               	movwf	printf@ap
  3021  0565                     l1481:	
  3022                           ;doprnt.c: 536: while(c = *f++) {
  3023                           
  3024  0565  3001               	movlw	1
  3025  0566  1283               	bcf	3,5	;RP0=0, select bank0
  3026  0567  1303               	bcf	3,6	;RP1=0, select bank0
  3027  0568  07AA               	addwf	printf@f,f
  3028  0569  30FF               	movlw	-1
  3029  056A  072A               	addwf	printf@f,w
  3030  056B  0084               	movwf	4
  3031  056C  2001               	fcall	stringdir
  3032  056D  00A2               	movwf	??_printf
  3033  056E  0822               	movf	??_printf,w
  3034  056F  00AB               	movwf	printf@c
  3035  0570  082B               	movf	printf@c,w
  3036  0571  1903               	btfsc	3,2
  3037  0572  0008               	return
  3038                           
  3039                           ;doprnt.c: 538: if(c != '%')
  3040  0573  3025               	movlw	37
  3041  0574  062B               	xorwf	printf@c,w
  3042  0575  1903               	btfsc	3,2
  3043  0576  2D7A               	goto	l1437
  3044                           
  3045                           ;doprnt.c: 540: {
  3046                           ;doprnt.c: 541: (putch(c) );
  3047  0577  082B               	movf	printf@c,w
  3048  0578  2295               	fcall	_putch
  3049                           
  3050                           ;doprnt.c: 542: continue;
  3051  0579  2D65               	goto	l1481
  3052  057A                     l1437:	
  3053                           
  3054                           ;doprnt.c: 543: }
  3055                           ;doprnt.c: 548: flag = 0;
  3056  057A  1283               	bcf	3,5	;RP0=0, select bank0
  3057  057B  1303               	bcf	3,6	;RP1=0, select bank0
  3058  057C  01A7               	clrf	printf@flag
  3059                           
  3060                           ;doprnt.c: 635: switch(c = *f++) {
  3061  057D  2D80               	goto	l1441
  3062  057E                     l245:	
  3063                           ;doprnt.c: 817: case 'u':
  3064                           
  3065                           ;doprnt.c: 813: continue;
  3066                           
  3067                           ;doprnt.c: 802: default:
  3068                           
  3069                           ;doprnt.c: 698: case 'i':
  3070                           ;doprnt.c: 699: break;
  3071                           
  3072                           ;doprnt.c: 697: case 'd':
  3073                           
  3074                           ;doprnt.c: 638: goto alldone;
  3075                           
  3076                           ;doprnt.c: 637: case 0:
  3077                           
  3078                           
  3079                           ;doprnt.c: 818: flag |= 0x40;
  3080  057E  1727               	bsf	printf@flag,6
  3081                           
  3082                           ;doprnt.c: 822: }
  3083                           
  3084                           ;doprnt.c: 819: break;
  3085  057F  2D94               	goto	l243
  3086  0580                     l1441:	
  3087  0580  3001               	movlw	1
  3088  0581  07AA               	addwf	printf@f,f
  3089  0582  30FF               	movlw	-1
  3090  0583  072A               	addwf	printf@f,w
  3091  0584  0084               	movwf	4
  3092  0585  2001               	fcall	stringdir
  3093  0586  00AB               	movwf	printf@c
  3094                           
  3095                           ; Switch size 1, requested type "space"
  3096                           ; Number of cases is 4, Range of values is 0 to 117
  3097                           ; switch strategies available:
  3098                           ; Name         Instructions Cycles
  3099                           ; simple_byte           13     7 (average)
  3100                           ; direct_byte          124     6 (fixed)
  3101                           ; jumptable            260     6 (fixed)
  3102                           ;	Chosen strategy is simple_byte
  3103  0587  3A00               	xorlw	0	; case 0
  3104  0588  1903               	skipnz
  3105  0589  2E0F               	goto	l257
  3106  058A  3A64               	xorlw	100	; case 100
  3107  058B  1903               	skipnz
  3108  058C  2D94               	goto	l243
  3109  058D  3A0D               	xorlw	13	; case 105
  3110  058E  1903               	skipnz
  3111  058F  2D94               	goto	l243
  3112  0590  3A1C               	xorlw	28	; case 117
  3113  0591  1903               	skipnz
  3114  0592  2D7E               	goto	l245
  3115  0593  2D65               	goto	l1481
  3116  0594                     l243:	
  3117                           
  3118                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  3119  0594  1B27               	btfsc	printf@flag,6
  3120  0595  2DAE               	goto	l1453
  3121                           
  3122                           ;doprnt.c: 1253: {
  3123                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3124  0596  0826               	movf	printf@ap,w
  3125  0597  0084               	movwf	4
  3126  0598  1383               	bcf	3,7	;select IRP bank0
  3127  0599  0800               	movf	0,w
  3128  059A  00A8               	movwf	printf@val
  3129  059B  0A84               	incf	4,f
  3130  059C  0800               	movf	0,w
  3131  059D  00A9               	movwf	printf@val+1
  3132  059E  3002               	movlw	2
  3133  059F  00A2               	movwf	??_printf
  3134  05A0  0822               	movf	??_printf,w
  3135  05A1  07A6               	addwf	printf@ap,f
  3136                           
  3137                           ;doprnt.c: 1261: if((int)val < 0) {
  3138  05A2  1FA9               	btfss	printf@val+1,7
  3139  05A3  2DBA               	goto	l1457
  3140                           
  3141                           ;doprnt.c: 1262: flag |= 0x03;
  3142  05A4  3003               	movlw	3
  3143  05A5  00A2               	movwf	??_printf
  3144  05A6  0822               	movf	??_printf,w
  3145  05A7  04A7               	iorwf	printf@flag,f
  3146                           
  3147                           ;doprnt.c: 1263: val = -val;
  3148  05A8  09A8               	comf	printf@val,f
  3149  05A9  09A9               	comf	printf@val+1,f
  3150  05AA  0AA8               	incf	printf@val,f
  3151  05AB  1903               	skipnz
  3152  05AC  0AA9               	incf	printf@val+1,f
  3153                           
  3154                           ;doprnt.c: 1264: }
  3155                           ;doprnt.c: 1266: }
  3156  05AD  2DBA               	goto	l1457
  3157  05AE                     l1453:	
  3158                           
  3159                           ;doprnt.c: 1268: else
  3160                           ;doprnt.c: 1273: {
  3161                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3162  05AE  0826               	movf	printf@ap,w
  3163  05AF  0084               	movwf	4
  3164  05B0  1383               	bcf	3,7	;select IRP bank0
  3165  05B1  0800               	movf	0,w
  3166  05B2  00A8               	movwf	printf@val
  3167  05B3  0A84               	incf	4,f
  3168  05B4  0800               	movf	0,w
  3169  05B5  00A9               	movwf	printf@val+1
  3170  05B6  3002               	movlw	2
  3171  05B7  00A2               	movwf	??_printf
  3172  05B8  0822               	movf	??_printf,w
  3173  05B9  07A6               	addwf	printf@ap,f
  3174  05BA                     l1457:	
  3175                           
  3176                           ;doprnt.c: 1287: }
  3177                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3178  05BA  01AB               	clrf	printf@c
  3179  05BB  0AAB               	incf	printf@c,f
  3180  05BC  3005               	movlw	5
  3181  05BD  062B               	xorwf	printf@c,w
  3182  05BE  1903               	btfsc	3,2
  3183  05BF  2DD9               	goto	l1469
  3184  05C0                     l1463:	
  3185                           
  3186                           ;doprnt.c: 1306: if(val < dpowers[c])
  3187  05C0  082B               	movf	printf@c,w
  3188  05C1  00A2               	movwf	??_printf
  3189  05C2  0722               	addwf	??_printf,w
  3190  05C3  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3191  05C4  0084               	movwf	4
  3192  05C5  2001               	fcall	stringdir
  3193  05C6  00A3               	movwf	??_printf+1
  3194  05C7  2001               	fcall	stringdir
  3195  05C8  00A4               	movwf	??_printf+2
  3196  05C9  0824               	movf	??_printf+2,w
  3197  05CA  0229               	subwf	printf@val+1,w
  3198  05CB  1D03               	skipz
  3199  05CC  2DCF               	goto	u1235
  3200  05CD  0823               	movf	??_printf+1,w
  3201  05CE  0228               	subwf	printf@val,w
  3202  05CF                     u1235:	
  3203  05CF  1C03               	btfss	3,0
  3204  05D0  2DD9               	goto	l1469
  3205                           
  3206                           ;doprnt.c: 1307: break;
  3207  05D1  3001               	movlw	1
  3208  05D2  00A2               	movwf	??_printf
  3209  05D3  0822               	movf	??_printf,w
  3210  05D4  07AB               	addwf	printf@c,f
  3211  05D5  3005               	movlw	5
  3212  05D6  062B               	xorwf	printf@c,w
  3213  05D7  1D03               	btfss	3,2
  3214  05D8  2DC0               	goto	l1463
  3215  05D9                     l1469:	
  3216                           
  3217                           ;doprnt.c: 1422: {
  3218                           ;doprnt.c: 1438: if(flag & 0x03)
  3219  05D9  0827               	movf	printf@flag,w
  3220  05DA  3903               	andlw	3
  3221  05DB  1903               	btfsc	3,2
  3222  05DC  2DDF               	goto	l1473
  3223                           
  3224                           ;doprnt.c: 1439: (putch('-') );
  3225  05DD  302D               	movlw	45
  3226  05DE  2295               	fcall	_putch
  3227  05DF                     l1473:	
  3228                           
  3229                           ;doprnt.c: 1469: }
  3230                           ;doprnt.c: 1472: prec = c;
  3231  05DF  1283               	bcf	3,5	;RP0=0, select bank0
  3232  05E0  1303               	bcf	3,6	;RP1=0, select bank0
  3233  05E1  082B               	movf	printf@c,w
  3234  05E2  00A2               	movwf	??_printf
  3235  05E3  0822               	movf	??_printf,w
  3236  05E4  00A5               	movwf	printf@prec
  3237  05E5                     l1479:	
  3238                           ;doprnt.c: 1474: while(prec--) {
  3239                           
  3240  05E5  30FF               	movlw	255
  3241  05E6  1283               	bcf	3,5	;RP0=0, select bank0
  3242  05E7  1303               	bcf	3,6	;RP1=0, select bank0
  3243  05E8  00A2               	movwf	??_printf
  3244  05E9  0822               	movf	??_printf,w
  3245  05EA  07A5               	addwf	printf@prec,f
  3246  05EB  0A25               	incf	printf@prec,w
  3247  05EC  1903               	btfsc	3,2
  3248  05ED  2D65               	goto	l1481
  3249                           
  3250                           ;doprnt.c: 1478: {
  3251                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3252  05EE  300A               	movlw	10
  3253  05EF  00F8               	movwf	___lwmod@divisor
  3254  05F0  3000               	movlw	0
  3255  05F1  00F9               	movwf	___lwmod@divisor+1
  3256  05F2  0825               	movf	printf@prec,w
  3257  05F3  00A2               	movwf	??_printf
  3258  05F4  0722               	addwf	??_printf,w
  3259  05F5  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3260  05F6  0084               	movwf	4
  3261  05F7  2001               	fcall	stringdir
  3262  05F8  00F0               	movwf	___lwdiv@divisor
  3263  05F9  2001               	fcall	stringdir
  3264  05FA  00F1               	movwf	___lwdiv@divisor+1
  3265  05FB  0829               	movf	printf@val+1,w
  3266  05FC  00F3               	movwf	___lwdiv@dividend+1
  3267  05FD  0828               	movf	printf@val,w
  3268  05FE  00F2               	movwf	___lwdiv@dividend
  3269  05FF  238A               	fcall	___lwdiv
  3270  0600  0871               	movf	?___lwdiv+1,w
  3271  0601  00FB               	movwf	___lwmod@dividend+1
  3272  0602  0870               	movf	?___lwdiv,w
  3273  0603  00FA               	movwf	___lwmod@dividend
  3274  0604  22EB               	fcall	___lwmod
  3275  0605  0878               	movf	?___lwmod,w
  3276  0606  3E30               	addlw	48
  3277  0607  1283               	bcf	3,5	;RP0=0, select bank0
  3278  0608  1303               	bcf	3,6	;RP1=0, select bank0
  3279  0609  00A3               	movwf	??_printf+1
  3280  060A  0823               	movf	??_printf+1,w
  3281  060B  00AB               	movwf	printf@c
  3282                           
  3283                           ;doprnt.c: 1523: }
  3284                           ;doprnt.c: 1524: (putch(c) );
  3285  060C  082B               	movf	printf@c,w
  3286  060D  2295               	fcall	_putch
  3287  060E  2DE5               	goto	l1479
  3288  060F                     l257:	
  3289                           ;doprnt.c: 1540: return 0;
  3290                           ;	Return value of _printf is never used
  3291                           
  3292                           ;doprnt.c: 1525: }
  3293                           ;doprnt.c: 1533: }
  3294                           ;doprnt.c: 1535: alldone:
  3295                           
  3296  060F  0008               	return
  3297  0610                     __end_of_printf:	
  3298                           
  3299                           	psect	text18
  3300  0295                     __ptext18:	
  3301 ;; *************** function _putch *****************
  3302 ;; Defined at:
  3303 ;;		line 8 in file "UART.c"
  3304 ;; Parameters:    Size  Location     Type
  3305 ;;  data            1    wreg     unsigned char 
  3306 ;; Auto vars:     Size  Location     Type
  3307 ;;  data            1    0[COMMON] unsigned char 
  3308 ;; Return value:  Size  Location     Type
  3309 ;;		None               void
  3310 ;; Registers used:
  3311 ;;		wreg, status,2, status,0
  3312 ;; Tracked objects:
  3313 ;;		On entry : 0/0
  3314 ;;		On exit  : 0/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3317 ;;      Params:         0       0       0       0
  3318 ;;      Locals:         1       0       0       0
  3319 ;;      Temps:          0       0       0       0
  3320 ;;      Totals:         1       0       0       0
  3321 ;;Total ram usage:        1 bytes
  3322 ;; Hardware stack levels used:    1
  3323 ;; This function calls:
  3324 ;;		Nothing
  3325 ;; This function is called by:
  3326 ;;		_printf
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           
  3331                           ;psect for function _putch
  3332  0295                     _putch:	
  3333                           
  3334                           ;incstack = 0
  3335                           ; Regs used in _putch: [wreg+status,2+status,0]
  3336                           ;putch@data stored from wreg
  3337  0295  00F0               	movwf	putch@data
  3338                           
  3339                           ;UART.c: 10: if(data == 10)
  3340  0296  300A               	movlw	10
  3341  0297  0670               	xorwf	putch@data,w
  3342  0298  1D03               	btfss	3,2
  3343  0299  2AA5               	goto	l45
  3344  029A                     l38:	
  3345                           ;UART.c: 13: continue;
  3346                           
  3347                           ;UART.c: 11: {
  3348                           ;UART.c: 12: while(!TXIF)
  3349                           
  3350  029A  1283               	bcf	3,5	;RP0=0, select bank0
  3351  029B  1303               	bcf	3,6	;RP1=0, select bank0
  3352  029C  1E0C               	btfss	12,4	;volatile
  3353  029D  2A9A               	goto	l38
  3354                           
  3355                           ;UART.c: 14: TXREG = 10;
  3356  029E  300A               	movlw	10
  3357  029F  0099               	movwf	25	;volatile
  3358  02A0                     l41:	
  3359                           ;UART.c: 16: continue;
  3360                           
  3361                           ;UART.c: 15: while(!TXIF)
  3362                           
  3363  02A0  1E0C               	btfss	12,4	;volatile
  3364  02A1  2AA0               	goto	l41
  3365                           
  3366                           ;UART.c: 17: TXREG = 13;
  3367  02A2  300D               	movlw	13
  3368  02A3  0099               	movwf	25	;volatile
  3369                           
  3370                           ;UART.c: 18: return;
  3371  02A4  0008               	return
  3372  02A5                     l45:	
  3373                           ;UART.c: 21: continue;
  3374                           
  3375                           ;UART.c: 19: }
  3376                           ;UART.c: 20: while(!TXIF)
  3377                           
  3378  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  3379  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  3380  02A7  1E0C               	btfss	12,4	;volatile
  3381  02A8  2AA5               	goto	l45
  3382                           
  3383                           ;UART.c: 22: TXREG = data;
  3384  02A9  0870               	movf	putch@data,w
  3385  02AA  0099               	movwf	25	;volatile
  3386  02AB  0008               	return
  3387  02AC                     __end_of_putch:	
  3388                           
  3389                           	psect	text19
  3390  02EB                     __ptext19:	
  3391 ;; *************** function ___lwmod *****************
  3392 ;; Defined at:
  3393 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;  divisor         2    8[COMMON] unsigned int 
  3396 ;;  dividend        2   10[COMMON] unsigned int 
  3397 ;; Auto vars:     Size  Location     Type
  3398 ;;  counter         1   13[COMMON] unsigned char 
  3399 ;; Return value:  Size  Location     Type
  3400 ;;                  2    8[COMMON] unsigned int 
  3401 ;; Registers used:
  3402 ;;		wreg, status,2, status,0
  3403 ;; Tracked objects:
  3404 ;;		On entry : 0/0
  3405 ;;		On exit  : 0/0
  3406 ;;		Unchanged: 0/0
  3407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3408 ;;      Params:         4       0       0       0
  3409 ;;      Locals:         1       0       0       0
  3410 ;;      Temps:          1       0       0       0
  3411 ;;      Totals:         6       0       0       0
  3412 ;;Total ram usage:        6 bytes
  3413 ;; Hardware stack levels used:    1
  3414 ;; This function calls:
  3415 ;;		Nothing
  3416 ;; This function is called by:
  3417 ;;		_printf
  3418 ;; This function uses a non-reentrant model
  3419 ;;
  3420                           
  3421                           
  3422                           ;psect for function ___lwmod
  3423  02EB                     ___lwmod:	
  3424                           
  3425                           ;incstack = 0
  3426                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3427  02EB  0878               	movf	___lwmod@divisor,w
  3428  02EC  0479               	iorwf	___lwmod@divisor+1,w
  3429  02ED  1903               	btfsc	3,2
  3430  02EE  2B18               	goto	l1369
  3431  02EF  01FD               	clrf	___lwmod@counter
  3432  02F0  0AFD               	incf	___lwmod@counter,f
  3433  02F1                     l1359:	
  3434  02F1  1BF9               	btfsc	___lwmod@divisor+1,7
  3435  02F2  2AFF               	goto	l1361
  3436  02F3  3001               	movlw	1
  3437  02F4                     u1045:	
  3438  02F4  1003               	clrc
  3439  02F5  0DF8               	rlf	___lwmod@divisor,f
  3440  02F6  0DF9               	rlf	___lwmod@divisor+1,f
  3441  02F7  3EFF               	addlw	-1
  3442  02F8  1D03               	skipz
  3443  02F9  2AF4               	goto	u1045
  3444  02FA  3001               	movlw	1
  3445  02FB  00FC               	movwf	??___lwmod
  3446  02FC  087C               	movf	??___lwmod,w
  3447  02FD  07FD               	addwf	___lwmod@counter,f
  3448  02FE  2AF1               	goto	l1359
  3449  02FF                     l1361:	
  3450  02FF  0879               	movf	___lwmod@divisor+1,w
  3451  0300  027B               	subwf	___lwmod@dividend+1,w
  3452  0301  1D03               	skipz
  3453  0302  2B05               	goto	u1065
  3454  0303  0878               	movf	___lwmod@divisor,w
  3455  0304  027A               	subwf	___lwmod@dividend,w
  3456  0305                     u1065:	
  3457  0305  1C03               	skipc
  3458  0306  2B0D               	goto	l1365
  3459  0307  0878               	movf	___lwmod@divisor,w
  3460  0308  02FA               	subwf	___lwmod@dividend,f
  3461  0309  0879               	movf	___lwmod@divisor+1,w
  3462  030A  1C03               	skipc
  3463  030B  03FB               	decf	___lwmod@dividend+1,f
  3464  030C  02FB               	subwf	___lwmod@dividend+1,f
  3465  030D                     l1365:	
  3466  030D  3001               	movlw	1
  3467  030E                     u1075:	
  3468  030E  1003               	clrc
  3469  030F  0CF9               	rrf	___lwmod@divisor+1,f
  3470  0310  0CF8               	rrf	___lwmod@divisor,f
  3471  0311  3EFF               	addlw	-1
  3472  0312  1D03               	skipz
  3473  0313  2B0E               	goto	u1075
  3474  0314  3001               	movlw	1
  3475  0315  02FD               	subwf	___lwmod@counter,f
  3476  0316  1D03               	btfss	3,2
  3477  0317  2AFF               	goto	l1361
  3478  0318                     l1369:	
  3479  0318  087B               	movf	___lwmod@dividend+1,w
  3480  0319  00F9               	movwf	?___lwmod+1
  3481  031A  087A               	movf	___lwmod@dividend,w
  3482  031B  00F8               	movwf	?___lwmod
  3483  031C  0008               	return
  3484  031D                     __end_of___lwmod:	
  3485                           
  3486                           	psect	text20
  3487  038A                     __ptext20:	
  3488 ;; *************** function ___lwdiv *****************
  3489 ;; Defined at:
  3490 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;  divisor         2    0[COMMON] unsigned int 
  3493 ;;  dividend        2    2[COMMON] unsigned int 
  3494 ;; Auto vars:     Size  Location     Type
  3495 ;;  quotient        2    5[COMMON] unsigned int 
  3496 ;;  counter         1    7[COMMON] unsigned char 
  3497 ;; Return value:  Size  Location     Type
  3498 ;;                  2    0[COMMON] unsigned int 
  3499 ;; Registers used:
  3500 ;;		wreg, status,2, status,0
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3506 ;;      Params:         4       0       0       0
  3507 ;;      Locals:         3       0       0       0
  3508 ;;      Temps:          1       0       0       0
  3509 ;;      Totals:         8       0       0       0
  3510 ;;Total ram usage:        8 bytes
  3511 ;; Hardware stack levels used:    1
  3512 ;; This function calls:
  3513 ;;		Nothing
  3514 ;; This function is called by:
  3515 ;;		_printf
  3516 ;; This function uses a non-reentrant model
  3517 ;;
  3518                           
  3519                           
  3520                           ;psect for function ___lwdiv
  3521  038A                     ___lwdiv:	
  3522                           
  3523                           ;incstack = 0
  3524                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3525  038A  01F5               	clrf	___lwdiv@quotient
  3526  038B  01F6               	clrf	___lwdiv@quotient+1
  3527  038C  0870               	movf	___lwdiv@divisor,w
  3528  038D  0471               	iorwf	___lwdiv@divisor+1,w
  3529  038E  1903               	btfsc	3,2
  3530  038F  2BC1               	goto	l1347
  3531  0390  01F7               	clrf	___lwdiv@counter
  3532  0391  0AF7               	incf	___lwdiv@counter,f
  3533  0392                     l1335:	
  3534  0392  1BF1               	btfsc	___lwdiv@divisor+1,7
  3535  0393  2BA0               	goto	l1337
  3536  0394  3001               	movlw	1
  3537  0395                     u975:	
  3538  0395  1003               	clrc
  3539  0396  0DF0               	rlf	___lwdiv@divisor,f
  3540  0397  0DF1               	rlf	___lwdiv@divisor+1,f
  3541  0398  3EFF               	addlw	-1
  3542  0399  1D03               	skipz
  3543  039A  2B95               	goto	u975
  3544  039B  3001               	movlw	1
  3545  039C  00F4               	movwf	??___lwdiv
  3546  039D  0874               	movf	??___lwdiv,w
  3547  039E  07F7               	addwf	___lwdiv@counter,f
  3548  039F  2B92               	goto	l1335
  3549  03A0                     l1337:	
  3550  03A0  3001               	movlw	1
  3551  03A1                     u995:	
  3552  03A1  1003               	clrc
  3553  03A2  0DF5               	rlf	___lwdiv@quotient,f
  3554  03A3  0DF6               	rlf	___lwdiv@quotient+1,f
  3555  03A4  3EFF               	addlw	-1
  3556  03A5  1D03               	skipz
  3557  03A6  2BA1               	goto	u995
  3558  03A7  0871               	movf	___lwdiv@divisor+1,w
  3559  03A8  0273               	subwf	___lwdiv@dividend+1,w
  3560  03A9  1D03               	skipz
  3561  03AA  2BAD               	goto	u1005
  3562  03AB  0870               	movf	___lwdiv@divisor,w
  3563  03AC  0272               	subwf	___lwdiv@dividend,w
  3564  03AD                     u1005:	
  3565  03AD  1C03               	skipc
  3566  03AE  2BB6               	goto	l1343
  3567  03AF  0870               	movf	___lwdiv@divisor,w
  3568  03B0  02F2               	subwf	___lwdiv@dividend,f
  3569  03B1  0871               	movf	___lwdiv@divisor+1,w
  3570  03B2  1C03               	skipc
  3571  03B3  03F3               	decf	___lwdiv@dividend+1,f
  3572  03B4  02F3               	subwf	___lwdiv@dividend+1,f
  3573  03B5  1475               	bsf	___lwdiv@quotient,0
  3574  03B6                     l1343:	
  3575  03B6  3001               	movlw	1
  3576  03B7                     u1015:	
  3577  03B7  1003               	clrc
  3578  03B8  0CF1               	rrf	___lwdiv@divisor+1,f
  3579  03B9  0CF0               	rrf	___lwdiv@divisor,f
  3580  03BA  3EFF               	addlw	-1
  3581  03BB  1D03               	skipz
  3582  03BC  2BB7               	goto	u1015
  3583  03BD  3001               	movlw	1
  3584  03BE  02F7               	subwf	___lwdiv@counter,f
  3585  03BF  1D03               	btfss	3,2
  3586  03C0  2BA0               	goto	l1337
  3587  03C1                     l1347:	
  3588  03C1  0876               	movf	___lwdiv@quotient+1,w
  3589  03C2  00F1               	movwf	?___lwdiv+1
  3590  03C3  0875               	movf	___lwdiv@quotient,w
  3591  03C4  00F0               	movwf	?___lwdiv
  3592  03C5  0008               	return
  3593  03C6                     __end_of___lwdiv:	
  3594                           
  3595                           	psect	text21
  3596  04DA                     __ptext21:	
  3597 ;; *************** function _SPI_transfer *****************
  3598 ;; Defined at:
  3599 ;;		line 42 in file "SPI.c"
  3600 ;; Parameters:    Size  Location     Type
  3601 ;;  data            1    wreg     unsigned char 
  3602 ;; Auto vars:     Size  Location     Type
  3603 ;;  data            1    7[COMMON] unsigned char 
  3604 ;;  i               2    5[COMMON] int 
  3605 ;;  i               2    3[COMMON] int 
  3606 ;;  ret             1    1[COMMON] unsigned char 
  3607 ;;  ret             1    2[COMMON] unsigned char 
  3608 ;; Return value:  Size  Location     Type
  3609 ;;                  1    wreg      unsigned char 
  3610 ;; Registers used:
  3611 ;;		wreg, status,2, status,0, btemp+1
  3612 ;; Tracked objects:
  3613 ;;		On entry : 0/0
  3614 ;;		On exit  : 0/0
  3615 ;;		Unchanged: 0/0
  3616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3617 ;;      Params:         0       0       0       0
  3618 ;;      Locals:         7       0       0       0
  3619 ;;      Temps:          1       0       0       0
  3620 ;;      Totals:         8       0       0       0
  3621 ;;Total ram usage:        8 bytes
  3622 ;; Hardware stack levels used:    1
  3623 ;; This function calls:
  3624 ;;		Nothing
  3625 ;; This function is called by:
  3626 ;;		_MFRC522_Wr
  3627 ;;		_MFRC522_Rd
  3628 ;; This function uses a non-reentrant model
  3629 ;;
  3630                           
  3631                           
  3632                           ;psect for function _SPI_transfer
  3633  04DA                     _SPI_transfer:	
  3634                           
  3635                           ;incstack = 0
  3636                           ; Regs used in _SPI_transfer: [wreg+status,2+status,0+btemp+1]
  3637                           ;SPI_transfer@data stored from wreg
  3638  04DA  00F7               	movwf	SPI_transfer@data
  3639                           
  3640                           ;SPI.c: 44: unsigned char ret;
  3641                           ;SPI.c: 45: if(_mode==1 || _mode==3)
  3642  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  3643  04DC  1303               	bcf	3,6	;RP1=0, select bank0
  3644  04DD  036E               	decf	__mode,w
  3645  04DE  1903               	btfsc	3,2
  3646  04DF  2CE4               	goto	l1377
  3647  04E0  3003               	movlw	3
  3648  04E1  066E               	xorwf	__mode,w
  3649  04E2  1D03               	btfss	3,2
  3650  04E3  2D1C               	goto	l1405
  3651  04E4                     l1377:	
  3652                           
  3653                           ;SPI.c: 46: {
  3654                           ;SPI.c: 47: for(int i=0;i<8;i++)
  3655  04E4  01F3               	clrf	SPI_transfer@i
  3656  04E5  01F4               	clrf	SPI_transfer@i+1
  3657  04E6                     L3:	
  3658  04E6  0874               	movf	SPI_transfer@i+1,w
  3659  04E7  3A80               	xorlw	128
  3660  04E8  00FF               	movwf	127
  3661  04E9  3080               	movlw	128
  3662  04EA  027F               	subwf	127,w
  3663  04EB  1D03               	skipz
  3664  04EC  2CEF               	goto	u1115
  3665  04ED  3008               	movlw	8
  3666  04EE  0273               	subwf	SPI_transfer@i,w
  3667  04EF                     u1115:	
  3668  04EF  1803               	btfsc	3,0
  3669  04F0  2D5C               	goto	l1427
  3670                           
  3671                           ;SPI.c: 48: {
  3672                           ;SPI.c: 50: if(data & 0x80)PORTB |= (1<<6);
  3673  04F1  1FF7               	btfss	SPI_transfer@data,7
  3674  04F2  2CF7               	goto	l1385
  3675  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  3676  04F4  1303               	bcf	3,6	;RP1=0, select bank0
  3677  04F5  1706               	bsf	6,6	;volatile
  3678  04F6  2CFD               	goto	l81
  3679  04F7                     l1385:	
  3680                           
  3681                           ;SPI.c: 51: else PORTB &= ~(1<<6);
  3682  04F7  30BF               	movlw	191
  3683  04F8  00F0               	movwf	??_SPI_transfer
  3684  04F9  0870               	movf	??_SPI_transfer,w
  3685  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  3686  04FB  1303               	bcf	3,6	;RP1=0, select bank0
  3687  04FC  0586               	andwf	6,f	;volatile
  3688  04FD                     l81:	
  3689                           
  3690                           ;SPI.c: 53: PORTB ^= (1<<7);
  3691  04FD  3080               	movlw	128
  3692  04FE  00F0               	movwf	??_SPI_transfer
  3693  04FF  0870               	movf	??_SPI_transfer,w
  3694  0500  0686               	xorwf	6,f	;volatile
  3695                           
  3696                           ;SPI.c: 54: if(PORTB & (1<<5))ret|=1;
  3697  0501  1A86               	btfsc	6,5	;volatile
  3698  0502  1472               	bsf	SPI_transfer@ret,0
  3699                           
  3700                           ;SPI.c: 55: _delay((unsigned long)((10)*(16000000/4000000.0)));
  3701  0503  300D               	movlw	13
  3702  0504  00F0               	movwf	??_SPI_transfer
  3703  0505                     u1867:	
  3704  0505  0BF0               	decfsz	??_SPI_transfer,f
  3705  0506  2D05               	goto	u1867
  3706                           
  3707                           ;SPI.c: 56: PORTB ^= (1<<7);
  3708  0507  3080               	movlw	128
  3709  0508  00F0               	movwf	??_SPI_transfer
  3710  0509  0870               	movf	??_SPI_transfer,w
  3711  050A  1283               	bcf	3,5	;RP0=0, select bank0
  3712  050B  1303               	bcf	3,6	;RP1=0, select bank0
  3713  050C  0686               	xorwf	6,f	;volatile
  3714                           
  3715                           ;SPI.c: 58: ret<<=1;
  3716  050D  1003               	clrc
  3717  050E  0DF2               	rlf	SPI_transfer@ret,f
  3718                           
  3719                           ;SPI.c: 59: data<<=1;
  3720  050F  1003               	clrc
  3721  0510  0DF7               	rlf	SPI_transfer@data,f
  3722                           
  3723                           ;SPI.c: 60: _delay((unsigned long)((10)*(16000000/4000000.0)));
  3724  0511  300D               	movlw	13
  3725  0512  00F0               	movwf	??_SPI_transfer
  3726  0513                     u1877:	
  3727  0513  0BF0               	decfsz	??_SPI_transfer,f
  3728  0514  2D13               	goto	u1877
  3729  0515  3001               	movlw	1
  3730  0516  07F3               	addwf	SPI_transfer@i,f
  3731  0517  1803               	skipnc
  3732  0518  0AF4               	incf	SPI_transfer@i+1,f
  3733  0519  3000               	movlw	0
  3734  051A  07F4               	addwf	SPI_transfer@i+1,f
  3735  051B  2CE6               	goto	L3
  3736  051C                     l1405:	
  3737                           ;SPI.c: 61: }
  3738                           ;SPI.c: 62: }
  3739                           
  3740                           
  3741                           ;SPI.c: 63: else
  3742                           ;SPI.c: 64: {
  3743                           ;SPI.c: 65: unsigned char ret;
  3744                           ;SPI.c: 66: for(int i=0;i<8;i++)
  3745  051C  01F5               	clrf	SPI_transfer@i_214
  3746  051D  01F6               	clrf	SPI_transfer@i_214+1
  3747  051E  0876               	movf	SPI_transfer@i_214+1,w
  3748  051F  3A80               	xorlw	128
  3749  0520  00FF               	movwf	127
  3750  0521  3080               	movlw	128
  3751  0522  027F               	subwf	127,w
  3752  0523  1D03               	skipz
  3753  0524  2D27               	goto	u1155
  3754  0525  3008               	movlw	8
  3755  0526  0275               	subwf	SPI_transfer@i_214,w
  3756  0527                     u1155:	
  3757  0527  1803               	btfsc	3,0
  3758  0528  2D5C               	goto	l1427
  3759  0529                     l84:	
  3760                           
  3761                           ;SPI.c: 67: {
  3762                           ;SPI.c: 69: if(PORTB & (1<<5))ret|=1;
  3763  0529  1283               	bcf	3,5	;RP0=0, select bank0
  3764  052A  1303               	bcf	3,6	;RP1=0, select bank0
  3765  052B  1A86               	btfsc	6,5	;volatile
  3766  052C  1471               	bsf	SPI_transfer@ret_213,0
  3767                           
  3768                           ;SPI.c: 70: PORTB ^= (1<<7);
  3769  052D  3080               	movlw	128
  3770  052E  00F0               	movwf	??_SPI_transfer
  3771  052F  0870               	movf	??_SPI_transfer,w
  3772  0530  0686               	xorwf	6,f	;volatile
  3773                           
  3774                           ;SPI.c: 73: if(data & 0x80)PORTB |= (1<<6);
  3775  0531  1FF7               	btfss	SPI_transfer@data,7
  3776  0532  2D35               	goto	l1419
  3777  0533  1706               	bsf	6,6	;volatile
  3778  0534  2D39               	goto	l1421
  3779  0535                     l1419:	
  3780                           
  3781                           ;SPI.c: 74: else PORTB &= ~(1<<6);
  3782  0535  30BF               	movlw	191
  3783  0536  00F0               	movwf	??_SPI_transfer
  3784  0537  0870               	movf	??_SPI_transfer,w
  3785  0538  0586               	andwf	6,f	;volatile
  3786  0539                     l1421:	
  3787                           
  3788                           ;SPI.c: 75: _delay((unsigned long)((10)*(16000000/4000000.0)));
  3789  0539  300D               	movlw	13
  3790  053A  00F0               	movwf	??_SPI_transfer
  3791  053B                     u1887:	
  3792  053B  0BF0               	decfsz	??_SPI_transfer,f
  3793  053C  2D3B               	goto	u1887
  3794                           
  3795                           ;SPI.c: 76: PORTB ^= (1<<7);
  3796  053D  3080               	movlw	128
  3797  053E  00F0               	movwf	??_SPI_transfer
  3798  053F  0870               	movf	??_SPI_transfer,w
  3799  0540  1283               	bcf	3,5	;RP0=0, select bank0
  3800  0541  1303               	bcf	3,6	;RP1=0, select bank0
  3801  0542  0686               	xorwf	6,f	;volatile
  3802                           
  3803                           ;SPI.c: 78: ret<<=1;
  3804  0543  1003               	clrc
  3805  0544  0DF1               	rlf	SPI_transfer@ret_213,f
  3806                           
  3807                           ;SPI.c: 79: data<<=1;
  3808  0545  1003               	clrc
  3809  0546  0DF7               	rlf	SPI_transfer@data,f
  3810                           
  3811                           ;SPI.c: 80: _delay((unsigned long)((10)*(16000000/4000000.0)));
  3812  0547  300D               	movlw	13
  3813  0548  00F0               	movwf	??_SPI_transfer
  3814  0549                     u1897:	
  3815  0549  0BF0               	decfsz	??_SPI_transfer,f
  3816  054A  2D49               	goto	u1897
  3817  054B  3001               	movlw	1
  3818  054C  07F5               	addwf	SPI_transfer@i_214,f
  3819  054D  1803               	skipnc
  3820  054E  0AF6               	incf	SPI_transfer@i_214+1,f
  3821  054F  3000               	movlw	0
  3822  0550  07F6               	addwf	SPI_transfer@i_214+1,f
  3823  0551  0876               	movf	SPI_transfer@i_214+1,w
  3824  0552  3A80               	xorlw	128
  3825  0553  00FF               	movwf	127
  3826  0554  3080               	movlw	128
  3827  0555  027F               	subwf	127,w
  3828  0556  1D03               	skipz
  3829  0557  2D5A               	goto	u1185
  3830  0558  3008               	movlw	8
  3831  0559  0275               	subwf	SPI_transfer@i_214,w
  3832  055A                     u1185:	
  3833  055A  1C03               	skipc
  3834  055B  2D29               	goto	l84
  3835  055C                     l1427:	
  3836                           
  3837                           ;SPI.c: 81: }
  3838                           ;SPI.c: 82: }
  3839                           ;SPI.c: 83: return ret;
  3840  055C  0872               	movf	SPI_transfer@ret,w
  3841  055D  0008               	return
  3842  055E                     __end_of_SPI_transfer:	
  3843  007E                     btemp	set	126	;btemp
  3844  007E                     wtemp	set	126
  3845  007E                     wtemp0	set	126
  3846  0080                     wtemp1	set	128
  3847  0082                     wtemp2	set	130
  3848  0084                     wtemp3	set	132
  3849  0086                     wtemp4	set	134
  3850  0088                     wtemp5	set	136
  3851  007F                     wtemp6	set	127
  3852  007E                     ttemp	set	126
  3853  007E                     ttemp0	set	126
  3854  0081                     ttemp1	set	129
  3855  0084                     ttemp2	set	132
  3856  0087                     ttemp3	set	135
  3857  007F                     ttemp4	set	127
  3858  007E                     ltemp	set	126
  3859  007E                     ltemp0	set	126
  3860  0082                     ltemp1	set	130
  3861  0086                     ltemp2	set	134
  3862  0080                     ltemp3	set	128


Data Sizes:
    Strings     50
    Constant    10
    Data        0
    BSS         18
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     76      79
    BANK1            80      0      16
    BANK2            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[3]), STR_5(CODE[9]), 
		 -> STR_4(CODE[16]), STR_3(CODE[2]), STR_2(CODE[11]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    MFRC522_ReadCardSerial@str	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_isCard@TagType	PTR unsigned char  size(1) Largest target is 1
		 -> main@TagType(BANK0[1]), 

    MFRC522_AntiColl@serNum	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_SelectTag@serNum	PTR unsigned char  size(1) Largest target is 6
		 -> main@UID(BANK0[6]), 

    MFRC522_CRC@dataOut	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Halt@buff(COMMON[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_CRC@dataIn	PTR unsigned char  size(1) Largest target is 18
		 -> MFRC522_Write@buff(BANK0[18]), MFRC522_Halt@buff(COMMON[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_Request@TagType	PTR unsigned char  size(1) Largest target is 1
		 -> main@TagType(BANK0[1]), 

    MFRC522_ToCard@backData	PTR unsigned char  size(1) Largest target is 18
		 -> main@UID(BANK0[6]), main@TagType(BANK0[1]), MFRC522_Write@buff(BANK0[18]), MFRC522_Auth@buff(COMMON[12]), 
		 -> MFRC522_Halt@buff(COMMON[4]), MFRC522_SelectTag@buffer(BANK0[9]), 

    MFRC522_ToCard@backLen	PTR unsigned int  size(1) Largest target is 2
		 -> MFRC522_AntiColl@unLen(BANK0[2]), MFRC522_Read@unLen(COMMON[2]), MFRC522_Write@recvBits(COMMON[2]), MFRC522_Auth@recvBits(COMMON[2]), 
		 -> MFRC522_Halt@unLen(COMMON[2]), MFRC522_SelectTag@recvBits(BANK0[2]), MFRC522_Request@backBits(BANK0[2]), 

    MFRC522_ToCard@sendData	PTR unsigned char  size(1) Largest target is 18
		 -> main@UID(BANK0[6]), main@TagType(BANK0[1]), MFRC522_Write@buff(BANK0[18]), MFRC522_Auth@buff(COMMON[12]), 
		 -> MFRC522_Halt@buff(COMMON[4]), MFRC522_SelectTag@buffer(BANK0[9]), 


Critical Paths under _main in COMMON

    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    _main->_MFRC522_SelectTag
    _MFRC522_isCard->_MFRC522_Request
    _MFRC522_Request->_MFRC522_ToCard
    _MFRC522_SelectTag->_MFRC522_ToCard
    _MFRC522_CRC->_MFRC522_Clear_Bit
    _MFRC522_ReadCardSerial->_MFRC522_AntiColl
    _MFRC522_AntiColl->_MFRC522_ToCard
    _MFRC522_ToCard->_MFRC522_Clear_Bit
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _MFRC522_Init->_MFRC522_AntennaOn
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Rd->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0   54579
                                             61 BANK0     15    15      0
                       _MFRC522_Init
             _MFRC522_ReadCardSerial
                  _MFRC522_SelectTag
                     _MFRC522_isCard
                           _SPI_init
                          _UART_init
                             _printf
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _MFRC522_isCard                                       2     2      0   12205
                                             50 BANK0      2     2      0
                    _MFRC522_Request
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Request                                      9     8      1   12156
                                             41 BANK0      9     8      1
                     _MFRC522_ToCard
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (1) _MFRC522_SelectTag                                   20    20      0   20432
                                             41 BANK0     20    20      0
                        _MFRC522_CRC
                     _MFRC522_ToCard
 ---------------------------------------------------------------------------------
 (2) _MFRC522_CRC                                          6     4      2    9238
                                             23 BANK0      6     4      2
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (1) _MFRC522_ReadCardSerial                               3     3      0   15341
                                             52 BANK0      3     3      0
                   _MFRC522_AntiColl
 ---------------------------------------------------------------------------------
 (2) _MFRC522_AntiColl                                    11    11      0   15247
                                             41 BANK0     11    11      0
                  _MFRC522_Clear_Bit
                     _MFRC522_ToCard
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_ToCard                                      18    14      4   10812
                                             23 BANK0     18    14      4
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Clear_Bit                                    4     3      1    3003
                                             19 BANK0      4     3      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (1) _MFRC522_Init                                         1     1      0    5062
                                             23 BANK0      1     1      0
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Reset                                        1     1      0    1109
                                             19 BANK0      1     1      0
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_AntennaOn                                    1     1      0    2844
                                             22 BANK0      1     1      0
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Set_Bit                                      3     2      1    2844
                                             19 BANK0      3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Wr                                           3     2      1    1109
                                             16 BANK0      3     2      1
                         _MFRC522_Rd (ARG)
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (5) _MFRC522_Rd                                           4     4      0    1457
                                             12 BANK0      4     4      0
                       _SPI_transfer
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              20    18      2    1226
                                              0 BANK0     12    10      2
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     268
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) _SPI_transfer                                         8     8      0     164
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MFRC522_Init
     _MFRC522_AntennaOn
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
           _SPI_transfer (ARG)
     _MFRC522_Reset
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
         _SPI_transfer (ARG)
     _MFRC522_Wr
       _MFRC522_Rd (ARG)
         _SPI_transfer
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
       _SPI_transfer (ARG)
   _MFRC522_ReadCardSerial
     _MFRC522_AntiColl
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
           _SPI_transfer (ARG)
       _MFRC522_ToCard
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _SPI_transfer
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch
             _SPI_transfer (ARG)
         _MFRC522_Rd
           _SPI_transfer
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
         _MFRC522_Set_Bit
           _MFRC522_Rd
             _SPI_transfer
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch
             _SPI_transfer (ARG)
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
         _SPI_transfer (ARG)
   _MFRC522_SelectTag
     _MFRC522_CRC
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
           _SPI_transfer (ARG)
       _MFRC522_Rd
         _SPI_transfer
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
         _SPI_transfer (ARG)
     _MFRC522_ToCard
       _MFRC522_Clear_Bit
         _MFRC522_Rd
           _SPI_transfer
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
           _SPI_transfer (ARG)
       _MFRC522_Rd
         _SPI_transfer
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _SPI_transfer
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
         _SPI_transfer (ARG)
   _MFRC522_isCard
     _MFRC522_Request
       _MFRC522_ToCard
         _MFRC522_Clear_Bit
           _MFRC522_Rd
             _SPI_transfer
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch
             _SPI_transfer (ARG)
         _MFRC522_Rd
           _SPI_transfer
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
         _MFRC522_Set_Bit
           _MFRC522_Rd
             _SPI_transfer
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _SPI_transfer
               _printf
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _putch
             _SPI_transfer (ARG)
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _SPI_transfer
             _printf
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _putch
           _SPI_transfer (ARG)
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _SPI_transfer
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
         _SPI_transfer (ARG)
   _SPI_init
   _UART_init
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     4C      4F       3       98.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      6D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      10       7       20.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      6D      10        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Apr 12 09:34:28 2015

                              pc 0002                      __CFG_CP$OFF 0000                     MFRC522_CRC@i 003B  
                   MFRC522_CRC@n 003A                               l41 02A0                               l45 02A5  
                             l38 029A                               l70 02E1                               l81 04FD  
                             l84 0529                               fsr 0004                      main@TagType 006B  
                            l144 0350                              l129 07F5                              l243 0594  
                            l245 057E                              l257 060F                              l198 04D8  
                   __CFG_CPD$OFF 0000                              u975 0395                              u995 03A1  
                            fsr0 0004                              indf 0000                     __CFG_FOSC$HS 0000  
                 ??_MFRC522_Init 0037                     __CFG_LVP$OFF 0000            __size_of_SPI_transfer 0084  
                           l1421 0539                             l1405 051C                             l1343 03B6  
                           l1335 0392                             l1511 06CC                             l1337 03A0  
                           l1361 02FF                             l1441 0580                             l1513 06D2  
                           l1419 0535                             l1427 055C                             l1347 03C1  
                           l1531 0703                             l1365 030D                             l1453 05AE  
                           l1437 057A                             l1541 073B                             l1533 0723  
                           l1517 06DB                             l1621 03DA                             l1359 02F1  
                           l1463 05C0                             l1519 06E3                             l1623 03F2  
                           l1711 047A                             l1703 044A                             l1607 034C  
                           l1385 04F7                             l1377 04E4                             l1369 0318  
                           l1473 05DF                             l1457 05BA                             l1481 0565  
                           l1561 076C                             l1713 047B                             l1539 0735  
                           l1635 040C                             l1627 03FE                             l1469 05D9  
                           l1549 0751                             l1741 0293                             l1725 025B  
                           l1901 06A8                             l1479 05E5                             l1575 07BF  
                           l1663 04CC                             l1903 06B1                             l1585 07C9  
                           l1569 07A6                             l1657 04BA                             l1587 07E8  
                           l1579 07C7                             l1683 02E5                             l1589 07EF  
                           l1695 0434                             l1881 0659                             l1867 0626  
                           l1895 0684                             STR_1 0035                             STR_2 0021  
                           STR_3 0041                             STR_4 0011                             STR_5 002C  
                           STR_6 003C                             STR_7 003A                             STR_8 003F  
                           u1005 03AD                             u1015 03B7                             u1115 04EF  
                           u1045 02F4                             u1065 0305                             u1155 0527  
                           u1075 030E                             u1235 05CF                             u1405 07D2  
                           u1185 055A                             u1285 070C                             u1815 0682  
                           u1825 06A6                             u1837 0631                             u1847 0640  
                           u1775 0624                             u1857 06BA                             u1785 0657  
                           u1867 0505                             u1877 0513                             u1887 053B  
                           u1897 0549                             _RCIF 0065                             _TXIF 0064  
                           _main 0610            MFRC522_AntiColl@unLen 004F                             btemp 007E  
                           ltemp 007E                             start 0000                             ttemp 007E  
                           wtemp 007E                 _MFRC522_AntiColl 047D                    __CFG_MCLRE$ON 0000  
                 MFRC522_Rd@addr 002E                  ??_MFRC522_Reset 0033                   MFRC522_Wr@addr 0032  
                          ?_main 0070          ?_MFRC522_ReadCardSerial 0070                    __CFG_WDTE$OFF 0000  
                __end_of___lwdiv 03C6                  __end_of___lwmod 031D                 SPI_transfer@data 0077  
                          _RCREG 001A                     _SPI_transfer 04DA                            _SPBRG 0099  
                          _PORTB 0006                            _TRISB 0086                            _TXREG 0019  
            __size_of_MFRC522_Rd 001F              __size_of_MFRC522_Wr 0011                            __mode 006E  
             __size_of_UART_init 0011        MFRC522_SelectTag@recvBits 005A                  __end_of_dpowers 0011  
                          _count 006C           MFRC522_AntiColl@serNum 0053                            _putch 0295  
                          main@i 0067                   __CFG_BOREN$OFF 0000                            pclath 000A  
                          ltemp0 007E                 __end_of_SPI_init 02EB                            ltemp1 0082  
                          ltemp2 0086                            ltemp3 0080                _MFRC522_Clear_Bit 023D  
                          ttemp0 007E                            ttemp1 0081                            ttemp2 0084  
                          ttemp3 0087                            ttemp4 007F                            status 0003  
                          wtemp0 007E                            wtemp1 0080                            wtemp2 0082  
                          wtemp3 0084                            wtemp4 0086                            wtemp5 0088  
                          wtemp6 007F               ?_MFRC522_Clear_Bit 0033          MFRC522_SelectTag@buffer 004E  
        MFRC522_SelectTag@serNum 0059                _MFRC522_AntennaOn 021D                  __initialization 07F7  
                   __end_of_main 06C2               ?_MFRC522_AntennaOn 0070              ??_MFRC522_Clear_Bit 0034  
      MFRC522_ReadCardSerial@str 0056                  MFRC522_Rd@value 002F   __end_of_MFRC522_ReadCardSerial 0295  
               ??_MFRC522_ToCard 003B         __size_of_MFRC522_Set_Bit 000E         __size_of_MFRC522_Request 0035  
                         ??_main 005D              ??_MFRC522_AntennaOn 0036                  MFRC522_ToCard@i 0046  
                MFRC522_ToCard@n 0048                 ??_MFRC522_isCard 0052            MFRC522_ToCard@backLen 003A  
                MFRC522_Wr@value 0030        __end_of_MFRC522_Clear_Bit 024D            MFRC522_ToCard@_status 0042  
          MFRC522_ToCard@command 0045                SPI_transfer@i_214 0075                           ?_putch 0070  
              _MFRC522_SelectTag 0421            MFRC522_ToCard@sendLen 0038               ?_MFRC522_SelectTag 0070  
          MFRC522_ToCard@waitIRq 0041        __end_of_MFRC522_AntennaOn 0226                   __CFG_PWRTE$OFF 0000  
           __size_of_MFRC522_CRC 005B              ??_MFRC522_SelectTag 0049                __end_of_UART_init 027F  
           __end_of_MFRC522_Init 038A          MFRC522_AntiColl@_status 0051                        ??___lwdiv 0074  
                      ??___lwmod 007C                           _buffer 00A0                           _printf 055E  
      __end_of_MFRC522_SelectTag 047D         MFRC522_SelectTag@_status 0057          __end_of__initialization 07FE  
         MFRC522_Request@TagType 0049                     ??_MFRC522_Rd 002C                     ??_MFRC522_Wr 0031  
          MFRC522_isCard@TagType 0053                     SPI_init@mode 0071                   __pcstackCOMMON 0070  
                  __end_of_putch 02AC           MFRC522_Request@_status 004F                        ?_SPI_init 0070  
         MFRC522_Request@reqMode 004E         __end_of_MFRC522_AntiColl 04DA                ??_MFRC522_Set_Bit 0034  
             __end_of_MFRC522_Rd 02CB               __end_of_MFRC522_Wr 026E                ??_MFRC522_Request 004A  
     __size_of_MFRC522_Clear_Bit 0010                          ??_putch 0070                       __pbssBANK0 006C  
                     __pbssBANK1 00A0           MFRC522_ToCard@backData 0039       __size_of_MFRC522_AntennaOn 0009  
              MFRC522_CRC@dataIn 003C                       __pmaintext 0610                MFRC522_CRC@length 0037  
             MFRC522_SelectTag@i 005C                          ?_printf 0020           MFRC522_ToCard@lastBits 0043  
                     ??_SPI_init 0070           MFRC522_ToCard@sendData 0037       __size_of_MFRC522_SelectTag 005C  
                     __stringtab 0001            __size_of_MFRC522_Init 0038                          ___lwdiv 038A  
                        ___lwmod 02EB            __end_of_MFRC522_Reset 022F                          __ptext1 026E  
                        __ptext2 02CB                          __ptext3 024D                          __ptext4 031D  
                        __ptext5 0421                          __ptext6 03C6                          __ptext7 027F  
                        __ptext8 047D                          __ptext9 06C2                  __size_of_printf 00B2  
                        _dpowers 0007                          main@UID 0061                          clrloop0 0216  
                   _MFRC522_Init 0352             end_of_initialization 07FE    MFRC522_ReadCardSerial@_status 0055  
                      _RCSTAbits 0018                          printf@c 002B                          printf@f 002A  
                      _PORTAbits 0005                        _PORTBbits 0006                        _UART_init 026E  
                      _TRISAbits 0085                        _TRISBbits 0086                    ??_MFRC522_CRC 0039  
                      _TXSTAbits 0098                  _MFRC522_Set_Bit 022F          MFRC522_Request@backBits 0050  
            MFRC522_ToCard@irqEn 0044                  SPI_transfer@ret 0072                  _MFRC522_Request 031D  
                     ?_UART_init 0070                   __end_of_printf 0610              start_initialization 07F7  
              __size_of_SPI_init 0020                ?_MFRC522_AntiColl 0070                MFRC522_AntiColl@i 0052  
        __size_of_MFRC522_ToCard 0135               ??_MFRC522_AntiColl 0049          __size_of_MFRC522_isCard 0010  
       ??_MFRC522_ReadCardSerial 0054              __end_of_MFRC522_CRC 0421                         ??_printf 0022  
                  ?_SPI_transfer 0070                        ___latbits 0000                    __pcstackBANK0 0020  
                  SPI_transfer@i 0073                        __pnvBANK0 006E          __end_of_MFRC522_Set_Bit 023D  
             MFRC522_CRC@dataOut 0038          __end_of_MFRC522_Request 0352                 ___lwdiv@dividend 0072  
            MFRC522_Set_Bit@addr 0035              MFRC522_Set_Bit@mask 0033                         ?___lwdiv 0070  
                       ?___lwmod 0078                        __pstrings 0001                      ??_UART_init 0070  
                 ??_SPI_transfer 0070                 ___lwdiv@quotient 0075                   __size_of_putch 0017  
                    _MFRC522_CRC 03C6                        clear_ram0 0215  __size_of_MFRC522_ReadCardSerial 0016  
            SPI_transfer@ret_213 0071                      __stringbase 0006                        main@i_346 0069  
                       _SPI_init 02CB                       printf@flag 0027                       printf@prec 0025  
                 _MFRC522_ToCard 06C2                   _MFRC522_isCard 024D            MFRC522_SelectTag@size 0058  
         __size_of_MFRC522_Reset 0009                 ?_MFRC522_Set_Bit 0033            MFRC522_Clear_Bit@addr 0036  
               ?_MFRC522_Request 0049            MFRC522_Clear_Bit@mask 0033                 __size_of___lwdiv 003C  
               __size_of___lwmod 0032               __end_of__stringtab 0007           __end_of_MFRC522_ToCard 07F7  
         _MFRC522_ReadCardSerial 027F                  ___lwdiv@divisor 0070                  ___lwdiv@counter 0077  
                       __ptext10 023D                         __ptext11 0352                         __ptext20 038A  
                       __ptext12 0226                         __ptext21 04DA                         __ptext13 021D  
                       __ptext14 022F                         __ptext15 025D                         __ptext16 02AC  
                       __ptext17 055E                         __ptext18 0295                         __ptext19 02EB  
         __end_of_MFRC522_isCard 025D      MFRC522_AntiColl@serNumCheck 004E                    __size_of_main 00B2  
           __end_of_SPI_transfer 055E                       _MFRC522_Rd 02AC                       _MFRC522_Wr 025D  
      __size_of_MFRC522_AntiColl 005D                        printf@val 0028                         main@size 0060  
                  _MFRC522_Reset 0226                        putch@data 0070                  ?_MFRC522_ToCard 0037  
                ?_MFRC522_isCard 0070                 ___lwmod@dividend 007A                        stringcode 0001  
                       printf@ap 0026                   ?_MFRC522_Reset 0070                  ___lwmod@divisor 0078  
                ___lwmod@counter 007D                         stringdir 0001                         stringtab 0001  
                  ?_MFRC522_Init 0070                     ?_MFRC522_CRC 0037                      ?_MFRC522_Rd 0070  
                    ?_MFRC522_Wr 0030  
